//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\faks\vs\grammars-v4\golang\GoParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class GoParser : GoParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BREAK=1, DEFAULT=2, FUNC=3, INTERFACE=4, SELECT=5, CASE=6, DEFER=7, GO=8, 
		MAP=9, STRUCT=10, CHAN=11, ELSE=12, GOTO=13, PACKAGE=14, SWITCH=15, CONST=16, 
		FALLTHROUGH=17, IF=18, RANGE=19, TYPE=20, CONTINUE=21, FOR=22, IMPORT=23, 
		RETURN=24, VAR=25, NIL_LIT=26, IDENTIFIER=27, L_PAREN=28, R_PAREN=29, 
		L_CURLY=30, R_CURLY=31, L_BRACKET=32, R_BRACKET=33, ASSIGN=34, COMMA=35, 
		SEMI=36, COLON=37, DOT=38, PLUS_PLUS=39, MINUS_MINUS=40, DECLARE_ASSIGN=41, 
		ELLIPSIS=42, LOGICAL_OR=43, LOGICAL_AND=44, EQUALS=45, NOT_EQUALS=46, 
		LESS=47, LESS_OR_EQUALS=48, GREATER=49, GREATER_OR_EQUALS=50, OR=51, DIV=52, 
		MOD=53, LSHIFT=54, RSHIFT=55, BIT_CLEAR=56, EXCLAMATION=57, PLUS=58, MINUS=59, 
		CARET=60, STAR=61, AMPERSAND=62, RECEIVE=63, DECIMAL_LIT=64, BINARY_LIT=65, 
		OCTAL_LIT=66, HEX_LIT=67, FLOAT_LIT=68, DECIMAL_FLOAT_LIT=69, HEX_FLOAT_LIT=70, 
		IMAGINARY_LIT=71, RUNE_LIT=72, BYTE_VALUE=73, OCTAL_BYTE_VALUE=74, HEX_BYTE_VALUE=75, 
		LITTLE_U_VALUE=76, BIG_U_VALUE=77, RAW_STRING_LIT=78, INTERPRETED_STRING_LIT=79, 
		WS=80, COMMENT=81, TERMINATOR=82, LINE_COMMENT=83, WS_NLSEMI=84, COMMENT_NLSEMI=85, 
		LINE_COMMENT_NLSEMI=86, EOS=87, OTHER=88;
	public const int
		RULE_sourceFile = 0, RULE_packageClause = 1, RULE_importDecl = 2, RULE_importSpec = 3, 
		RULE_importPath = 4, RULE_declaration = 5, RULE_constDecl = 6, RULE_constSpec = 7, 
		RULE_identifierList = 8, RULE_expressionList = 9, RULE_typeDecl = 10, 
		RULE_typeSpec = 11, RULE_functionDecl = 12, RULE_methodDecl = 13, RULE_receiver = 14, 
		RULE_varDecl = 15, RULE_varSpec = 16, RULE_block = 17, RULE_statementList = 18, 
		RULE_statement = 19, RULE_simpleStmt = 20, RULE_expressionStmt = 21, RULE_sendStmt = 22, 
		RULE_incDecStmt = 23, RULE_assignment = 24, RULE_assign_op = 25, RULE_shortVarDecl = 26, 
		RULE_emptyStmt = 27, RULE_labeledStmt = 28, RULE_returnStmt = 29, RULE_breakStmt = 30, 
		RULE_continueStmt = 31, RULE_gotoStmt = 32, RULE_fallthroughStmt = 33, 
		RULE_deferStmt = 34, RULE_ifStmt = 35, RULE_switchStmt = 36, RULE_exprSwitchStmt = 37, 
		RULE_exprCaseClause = 38, RULE_exprSwitchCase = 39, RULE_typeSwitchStmt = 40, 
		RULE_typeSwitchGuard = 41, RULE_typeCaseClause = 42, RULE_typeSwitchCase = 43, 
		RULE_typeList = 44, RULE_selectStmt = 45, RULE_commClause = 46, RULE_commCase = 47, 
		RULE_recvStmt = 48, RULE_forStmt = 49, RULE_forClause = 50, RULE_rangeClause = 51, 
		RULE_goStmt = 52, RULE_type_ = 53, RULE_typeName = 54, RULE_typeLit = 55, 
		RULE_arrayType = 56, RULE_arrayLength = 57, RULE_elementType = 58, RULE_pointerType = 59, 
		RULE_interfaceType = 60, RULE_sliceType = 61, RULE_mapType = 62, RULE_channelType = 63, 
		RULE_methodSpec = 64, RULE_functionType = 65, RULE_signature = 66, RULE_result = 67, 
		RULE_parameters = 68, RULE_parameterDecl = 69, RULE_expression = 70, RULE_primaryExpr = 71, 
		RULE_conversion = 72, RULE_nonNamedType = 73, RULE_operand = 74, RULE_literal = 75, 
		RULE_basicLit = 76, RULE_integer = 77, RULE_operandName = 78, RULE_qualifiedIdent = 79, 
		RULE_compositeLit = 80, RULE_literalType = 81, RULE_literalValue = 82, 
		RULE_elementList = 83, RULE_keyedElement = 84, RULE_key = 85, RULE_element = 86, 
		RULE_structType = 87, RULE_fieldDecl = 88, RULE_string_ = 89, RULE_embeddedField = 90, 
		RULE_functionLit = 91, RULE_index = 92, RULE_slice_ = 93, RULE_typeAssertion = 94, 
		RULE_arguments = 95, RULE_methodExpr = 96, RULE_receiverType = 97, RULE_eos = 98;
	public static readonly string[] ruleNames = {
		"sourceFile", "packageClause", "importDecl", "importSpec", "importPath", 
		"declaration", "constDecl", "constSpec", "identifierList", "expressionList", 
		"typeDecl", "typeSpec", "functionDecl", "methodDecl", "receiver", "varDecl", 
		"varSpec", "block", "statementList", "statement", "simpleStmt", "expressionStmt", 
		"sendStmt", "incDecStmt", "assignment", "assign_op", "shortVarDecl", "emptyStmt", 
		"labeledStmt", "returnStmt", "breakStmt", "continueStmt", "gotoStmt", 
		"fallthroughStmt", "deferStmt", "ifStmt", "switchStmt", "exprSwitchStmt", 
		"exprCaseClause", "exprSwitchCase", "typeSwitchStmt", "typeSwitchGuard", 
		"typeCaseClause", "typeSwitchCase", "typeList", "selectStmt", "commClause", 
		"commCase", "recvStmt", "forStmt", "forClause", "rangeClause", "goStmt", 
		"type_", "typeName", "typeLit", "arrayType", "arrayLength", "elementType", 
		"pointerType", "interfaceType", "sliceType", "mapType", "channelType", 
		"methodSpec", "functionType", "signature", "result", "parameters", "parameterDecl", 
		"expression", "primaryExpr", "conversion", "nonNamedType", "operand", 
		"literal", "basicLit", "integer", "operandName", "qualifiedIdent", "compositeLit", 
		"literalType", "literalValue", "elementList", "keyedElement", "key", "element", 
		"structType", "fieldDecl", "string_", "embeddedField", "functionLit", 
		"index", "slice_", "typeAssertion", "arguments", "methodExpr", "receiverType", 
		"eos"
	};

	private static readonly string[] _LiteralNames = {
		null, "'break'", "'default'", "'func'", "'interface'", "'select'", "'case'", 
		"'defer'", "'go'", "'map'", "'struct'", "'chan'", "'else'", "'goto'", 
		"'package'", "'switch'", "'const'", "'fallthrough'", "'if'", "'range'", 
		"'type'", "'continue'", "'for'", "'import'", "'return'", "'var'", "'nil'", 
		null, "'('", "')'", "'{'", "'}'", "'['", "']'", "'='", "','", "';'", "':'", 
		"'.'", "'++'", "'--'", "':='", "'...'", "'||'", "'&&'", "'=='", "'!='", 
		"'<'", "'<='", "'>'", "'>='", "'|'", "'/'", "'%'", "'<<'", "'>>'", "'&^'", 
		"'!'", "'+'", "'-'", "'^'", "'*'", "'&'", "'<-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BREAK", "DEFAULT", "FUNC", "INTERFACE", "SELECT", "CASE", "DEFER", 
		"GO", "MAP", "STRUCT", "CHAN", "ELSE", "GOTO", "PACKAGE", "SWITCH", "CONST", 
		"FALLTHROUGH", "IF", "RANGE", "TYPE", "CONTINUE", "FOR", "IMPORT", "RETURN", 
		"VAR", "NIL_LIT", "IDENTIFIER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", 
		"L_BRACKET", "R_BRACKET", "ASSIGN", "COMMA", "SEMI", "COLON", "DOT", "PLUS_PLUS", 
		"MINUS_MINUS", "DECLARE_ASSIGN", "ELLIPSIS", "LOGICAL_OR", "LOGICAL_AND", 
		"EQUALS", "NOT_EQUALS", "LESS", "LESS_OR_EQUALS", "GREATER", "GREATER_OR_EQUALS", 
		"OR", "DIV", "MOD", "LSHIFT", "RSHIFT", "BIT_CLEAR", "EXCLAMATION", "PLUS", 
		"MINUS", "CARET", "STAR", "AMPERSAND", "RECEIVE", "DECIMAL_LIT", "BINARY_LIT", 
		"OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "DECIMAL_FLOAT_LIT", "HEX_FLOAT_LIT", 
		"IMAGINARY_LIT", "RUNE_LIT", "BYTE_VALUE", "OCTAL_BYTE_VALUE", "HEX_BYTE_VALUE", 
		"LITTLE_U_VALUE", "BIG_U_VALUE", "RAW_STRING_LIT", "INTERPRETED_STRING_LIT", 
		"WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "WS_NLSEMI", "COMMENT_NLSEMI", 
		"LINE_COMMENT_NLSEMI", "EOS", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PackageClauseContext packageClause() {
			return GetRuleContext<PackageClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclContext[] importDecl() {
			return GetRuleContexts<ImportDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclContext importDecl(int i) {
			return GetRuleContext<ImportDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public SourceFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSourceFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSourceFile(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSourceFile(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public SourceFileContext sourceFile() {
		SourceFileContext _localctx = new SourceFileContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			packageClause();
			State = 199;
			eos();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 200;
				importDecl();
				State = 201;
				eos();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << CONST) | (1L << TYPE) | (1L << VAR))) != 0)) {
				{
				{
				State = 211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 208;
					functionDecl();
					}
					break;
				case 2:
					{
					State = 209;
					methodDecl();
					}
					break;
				case 3:
					{
					State = 210;
					declaration();
					}
					break;
				}
				State = 213;
				eos();
				}
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageClauseContext : ParserRuleContext {
		public IToken packageName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(GoParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public PackageClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPackageClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPackageClause(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitPackageClause(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public PackageClauseContext packageClause() {
		PackageClauseContext _localctx = new PackageClauseContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(PACKAGE);
			State = 223;
			_localctx.packageName = Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(GoParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportSpecContext[] importSpec() {
			return GetRuleContexts<ImportSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportSpecContext importSpec(int i) {
			return GetRuleContext<ImportSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ImportDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitImportDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ImportDeclContext importDecl() {
		ImportDeclContext _localctx = new ImportDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(IMPORT);
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
			case DOT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				{
				State = 226;
				importSpec();
				}
				break;
			case L_PAREN:
				{
				State = 227;
				Match(L_PAREN);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 27)) & ~0x3f) == 0 && ((1L << (_la - 27)) & ((1L << (IDENTIFIER - 27)) | (1L << (DOT - 27)) | (1L << (RAW_STRING_LIT - 27)) | (1L << (INTERPRETED_STRING_LIT - 27)))) != 0)) {
					{
					{
					State = 228;
					importSpec();
					State = 229;
					eos();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSpecContext : ParserRuleContext {
		public IToken alias;
		[System.Diagnostics.DebuggerNonUserCode] public ImportPathContext importPath() {
			return GetRuleContext<ImportPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public ImportSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportSpec(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitImportSpec(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ImportSpecContext importSpec() {
		ImportSpecContext _localctx = new ImportSpecContext(Context, State);
		EnterRule(_localctx, 6, RULE_importSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER || _la==DOT) {
				{
				State = 239;
				_localctx.alias = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==DOT) ) {
					_localctx.alias = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 242;
			importPath();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public ImportPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterImportPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitImportPath(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitImportPath(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ImportPathContext importPath() {
		ImportPathContext _localctx = new ImportPathContext(Context, State);
		EnterRule(_localctx, 8, RULE_importPath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			string_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstDeclContext constDecl() {
			return GetRuleContext<ConstDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDeclContext typeDecl() {
			return GetRuleContext<TypeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDeclContext varDecl() {
			return GetRuleContext<VarDeclContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_declaration);
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				constDecl();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				typeDecl();
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				varDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONST() { return GetToken(GoParser.CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstSpecContext[] constSpec() {
			return GetRuleContexts<ConstSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstSpecContext constSpec(int i) {
			return GetRuleContext<ConstSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ConstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConstDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConstDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitConstDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ConstDeclContext constDecl() {
		ConstDeclContext _localctx = new ConstDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_constDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(CONST);
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 252;
				constSpec();
				}
				break;
			case L_PAREN:
				{
				State = 253;
				Match(L_PAREN);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 254;
					constSpec();
					State = 255;
					eos();
					}
					}
					State = 261;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 262;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ConstSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConstSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConstSpec(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitConstSpec(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ConstSpecContext constSpec() {
		ConstSpecContext _localctx = new ConstSpecContext(Context, State);
		EnterRule(_localctx, 14, RULE_constSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			identifierList();
			State = 271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << STAR) | (1L << RECEIVE))) != 0)) {
					{
					State = 266;
					type_();
					}
				}

				State = 269;
				Match(ASSIGN);
				State = 270;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(IDENTIFIER);
			State = 278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 274;
					Match(COMMA);
					State = 275;
					Match(IDENTIFIER);
					}
					} 
				}
				State = 280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 18, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			expression(0);
			State = 286;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 282;
					Match(COMMA);
					State = 283;
					expression(0);
					}
					} 
				}
				State = 288;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(GoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext[] typeSpec() {
			return GetRuleContexts<TypeSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSpecContext typeSpec(int i) {
			return GetRuleContext<TypeSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public TypeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeDeclContext typeDecl() {
		TypeDeclContext _localctx = new TypeDeclContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			Match(TYPE);
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 290;
				typeSpec();
				}
				break;
			case L_PAREN:
				{
				State = 291;
				Match(L_PAREN);
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 292;
					typeSpec();
					State = 293;
					eos();
					}
					}
					State = 299;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 300;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		public TypeSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSpec(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeSpec(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeSpecContext typeSpec() {
		TypeSpecContext _localctx = new TypeSpecContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(IDENTIFIER);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 304;
				Match(ASSIGN);
				}
			}

			State = 307;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			Match(FUNC);
			State = 310;
			Match(IDENTIFIER);
			State = 311;
			signature();
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 312;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReceiverContext receiver() {
			return GetRuleContext<ReceiverContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 26, RULE_methodDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			Match(FUNC);
			State = 316;
			receiver();
			State = 317;
			Match(IDENTIFIER);
			State = 318;
			signature();
			State = 320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 319;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ReceiverContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiver; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReceiver(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReceiver(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitReceiver(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ReceiverContext receiver() {
		ReceiverContext _localctx = new ReceiverContext(Context, State);
		EnterRule(_localctx, 28, RULE_receiver);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			parameters();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(GoParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext[] varSpec() {
			return GetRuleContexts<VarSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarSpecContext varSpec(int i) {
			return GetRuleContext<VarSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitVarDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitVarDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(Context, State);
		EnterRule(_localctx, 30, RULE_varDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			Match(VAR);
			State = 336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 325;
				varSpec();
				}
				break;
			case L_PAREN:
				{
				State = 326;
				Match(L_PAREN);
				State = 332;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IDENTIFIER) {
					{
					{
					State = 327;
					varSpec();
					State = 328;
					eos();
					}
					}
					State = 334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 335;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public VarSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterVarSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitVarSpec(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitVarSpec(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public VarSpecContext varSpec() {
		VarSpecContext _localctx = new VarSpecContext(Context, State);
		EnterRule(_localctx, 32, RULE_varSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			identifierList();
			State = 346;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				{
				State = 339;
				type_();
				State = 342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 340;
					Match(ASSIGN);
					State = 341;
					expressionList();
					}
					break;
				}
				}
				break;
			case ASSIGN:
				{
				State = 344;
				Match(ASSIGN);
				State = 345;
				expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitBlock(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 34, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(L_CURLY);
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 349;
				statementList();
				}
				break;
			}
			State = 352;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(GoParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(GoParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EOS() { return GetTokens(GoParser.EOS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS(int i) {
			return GetToken(GoParser.EOS, i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 36, RULE_statementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 361;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						State = 355;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SEMI) {
							{
							State = 354;
							Match(SEMI);
							}
						}

						}
						break;
					case 2:
						{
						State = 358;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EOS) {
							{
							State = 357;
							Match(EOS);
							}
						}

						}
						break;
					case 3:
						{
						State = 360;
						if (!(this.closingBracket())) throw new FailedPredicateException(this, "this.closingBracket()");
						}
						break;
					}
					State = 363;
					statement();
					State = 364;
					eos();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledStmtContext labeledStmt() {
			return GetRuleContext<LabeledStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GoStmtContext goStmt() {
			return GetRuleContext<GoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStmtContext breakStmt() {
			return GetRuleContext<BreakStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStmtContext continueStmt() {
			return GetRuleContext<ContinueStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GotoStmtContext gotoStmt() {
			return GetRuleContext<GotoStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FallthroughStmtContext fallthroughStmt() {
			return GetRuleContext<FallthroughStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStmtContext switchStmt() {
			return GetRuleContext<SwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStmtContext selectStmt() {
			return GetRuleContext<SelectStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStmtContext forStmt() {
			return GetRuleContext<ForStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeferStmtContext deferStmt() {
			return GetRuleContext<DeferStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitStatement(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement);
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 370;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 371;
				labeledStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 372;
				simpleStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 373;
				goStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 374;
				returnStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 375;
				breakStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 376;
				continueStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 377;
				gotoStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 378;
				fallthroughStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 379;
				block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 380;
				ifStmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 381;
				switchStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 382;
				selectStmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 383;
				forStmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 384;
				deferStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncDecStmtContext incDecStmt() {
			return GetRuleContext<IncDecStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStmtContext expressionStmt() {
			return GetRuleContext<ExpressionStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShortVarDeclContext shortVarDecl() {
			return GetRuleContext<ShortVarDeclContext>(0);
		}
		public SimpleStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSimpleStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSimpleStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSimpleStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public SimpleStmtContext simpleStmt() {
		SimpleStmtContext _localctx = new SimpleStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_simpleStmt);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				sendStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 388;
				incDecStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 389;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 390;
				expressionStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 391;
				shortVarDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExpressionStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ExpressionStmtContext expressionStmt() {
		ExpressionStmtContext _localctx = new ExpressionStmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_expressionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendStmtContext : ParserRuleContext {
		public ExpressionContext channel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSendStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSendStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSendStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public SendStmtContext sendStmt() {
		SendStmtContext _localctx = new SendStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_sendStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			_localctx.channel = expression(0);
			State = 397;
			Match(RECEIVE);
			State = 398;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncDecStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_PLUS() { return GetToken(GoParser.PLUS_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_MINUS() { return GetToken(GoParser.MINUS_MINUS, 0); }
		public IncDecStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incDecStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIncDecStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIncDecStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIncDecStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public IncDecStmtContext incDecStmt() {
		IncDecStmtContext _localctx = new IncDecStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_incDecStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			expression(0);
			State = 401;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS_PLUS || _la==MINUS_MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext[] expressionList() {
			return GetRuleContexts<ExpressionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList(int i) {
			return GetRuleContext<ExpressionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assign_opContext assign_op() {
			return GetRuleContext<Assign_opContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 48, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			expressionList();
			State = 404;
			assign_op();
			State = 405;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GoParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GoParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GoParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GoParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(GoParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(GoParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GoParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(GoParser.BIT_CLEAR, 0); }
		public Assign_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterAssign_op(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitAssign_op(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitAssign_op(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public Assign_opContext assign_op() {
		Assign_opContext _localctx = new Assign_opContext(Context, State);
		EnterRule(_localctx, 50, RULE_assign_op);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) {
				{
				State = 407;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 410;
			Match(ASSIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShortVarDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ShortVarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shortVarDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterShortVarDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitShortVarDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitShortVarDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ShortVarDeclContext shortVarDecl() {
		ShortVarDeclContext _localctx = new ShortVarDeclContext(Context, State);
		EnterRule(_localctx, 52, RULE_shortVarDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			identifierList();
			State = 413;
			Match(DECLARE_ASSIGN);
			State = 414;
			expressionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GoParser.EOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		public EmptyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEmptyStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEmptyStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitEmptyStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public EmptyStmtContext emptyStmt() {
		EmptyStmtContext _localctx = new EmptyStmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_emptyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_la = TokenStream.LA(1);
			if ( !(_la==SEMI || _la==EOS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLabeledStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLabeledStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitLabeledStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public LabeledStmtContext labeledStmt() {
		LabeledStmtContext _localctx = new LabeledStmtContext(Context, State);
		EnterRule(_localctx, 56, RULE_labeledStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			Match(IDENTIFIER);
			State = 419;
			Match(COLON);
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 420;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(GoParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			Match(RETURN);
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 424;
				expressionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(GoParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public BreakStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBreakStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBreakStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitBreakStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public BreakStmtContext breakStmt() {
		BreakStmtContext _localctx = new BreakStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_breakStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			Match(BREAK);
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 428;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(GoParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public ContinueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterContinueStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitContinueStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitContinueStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ContinueStmtContext continueStmt() {
		ContinueStmtContext _localctx = new ContinueStmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_continueStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(CONTINUE);
			State = 433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 432;
				Match(IDENTIFIER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GotoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GOTO() { return GetToken(GoParser.GOTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public GotoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gotoStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterGotoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitGotoStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitGotoStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public GotoStmtContext gotoStmt() {
		GotoStmtContext _localctx = new GotoStmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_gotoStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			Match(GOTO);
			State = 436;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FallthroughStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALLTHROUGH() { return GetToken(GoParser.FALLTHROUGH, 0); }
		public FallthroughStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fallthroughStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFallthroughStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFallthroughStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFallthroughStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public FallthroughStmtContext fallthroughStmt() {
		FallthroughStmtContext _localctx = new FallthroughStmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_fallthroughStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438;
			Match(FALLTHROUGH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeferStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFER() { return GetToken(GoParser.DEFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeferStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterDeferStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitDeferStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitDeferStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public DeferStmtContext deferStmt() {
		DeferStmtContext _localctx = new DeferStmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_deferStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(DEFER);
			State = 441;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(GoParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(GoParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_ifStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			Match(IF);
			State = 452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 444;
				expression(0);
				}
				break;
			case 2:
				{
				State = 445;
				eos();
				State = 446;
				expression(0);
				}
				break;
			case 3:
				{
				State = 448;
				simpleStmt();
				State = 449;
				eos();
				State = 450;
				expression(0);
				}
				break;
			}
			State = 454;
			block();
			State = 460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 455;
				Match(ELSE);
				State = 458;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IF:
					{
					State = 456;
					ifStmt();
					}
					break;
				case L_CURLY:
					{
					State = 457;
					block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprSwitchStmtContext exprSwitchStmt() {
			return GetRuleContext<ExprSwitchStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchStmtContext typeSwitchStmt() {
			return GetRuleContext<TypeSwitchStmtContext>(0);
		}
		public SwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSwitchStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public SwitchStmtContext switchStmt() {
		SwitchStmtContext _localctx = new SwitchStmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_switchStmt);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462;
				exprSwitchStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463;
				typeSwitchStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(GoParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprCaseClauseContext[] exprCaseClause() {
			return GetRuleContexts<ExprCaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprCaseClauseContext exprCaseClause(int i) {
			return GetRuleContext<ExprCaseClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		public ExprSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprSwitchStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExprSwitchStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ExprSwitchStmtContext exprSwitchStmt() {
		ExprSwitchStmtContext _localctx = new ExprSwitchStmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_exprSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			Match(SWITCH);
			State = 477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 467;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 471;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 470;
					simpleStmt();
					}
					break;
				}
				State = 473;
				eos();
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 474;
					expression(0);
					}
				}

				}
				break;
			}
			State = 479;
			Match(L_CURLY);
			State = 483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 480;
				exprCaseClause();
				}
				}
				State = 485;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 486;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprCaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprSwitchCaseContext exprSwitchCase() {
			return GetRuleContext<ExprSwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public ExprCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprCaseClause(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExprCaseClause(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ExprCaseClauseContext exprCaseClause() {
		ExprCaseClauseContext _localctx = new ExprCaseClauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_exprCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488;
			exprSwitchCase();
			State = 489;
			Match(COLON);
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 490;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprSwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public ExprSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprSwitchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExprSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExprSwitchCase(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExprSwitchCase(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ExprSwitchCaseContext exprSwitchCase() {
		ExprSwitchCaseContext _localctx = new ExprSwitchCaseContext(Context, State);
		EnterRule(_localctx, 78, RULE_exprSwitchCase);
		try {
			State = 496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				Match(CASE);
				State = 494;
				expressionList();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCH() { return GetToken(GoParser.SWITCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchGuardContext typeSwitchGuard() {
			return GetRuleContext<TypeSwitchGuardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt() {
			return GetRuleContext<SimpleStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCaseClauseContext[] typeCaseClause() {
			return GetRuleContexts<TypeCaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeCaseClauseContext typeCaseClause(int i) {
			return GetRuleContext<TypeCaseClauseContext>(i);
		}
		public TypeSwitchStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeSwitchStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeSwitchStmtContext typeSwitchStmt() {
		TypeSwitchStmtContext _localctx = new TypeSwitchStmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeSwitchStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(SWITCH);
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 499;
				typeSwitchGuard();
				}
				break;
			case 2:
				{
				State = 500;
				eos();
				State = 501;
				typeSwitchGuard();
				}
				break;
			case 3:
				{
				State = 503;
				simpleStmt();
				State = 504;
				eos();
				State = 505;
				typeSwitchGuard();
				}
				break;
			}
			State = 509;
			Match(L_CURLY);
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 510;
				typeCaseClause();
				}
				}
				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 516;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchGuardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(GoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public TypeSwitchGuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchGuard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchGuard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchGuard(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeSwitchGuard(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeSwitchGuardContext typeSwitchGuard() {
		TypeSwitchGuardContext _localctx = new TypeSwitchGuardContext(Context, State);
		EnterRule(_localctx, 82, RULE_typeSwitchGuard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 518;
				Match(IDENTIFIER);
				State = 519;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 522;
			primaryExpr(0);
			State = 523;
			Match(DOT);
			State = 524;
			Match(L_PAREN);
			State = 525;
			Match(TYPE);
			State = 526;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeCaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSwitchCaseContext typeSwitchCase() {
			return GetRuleContext<TypeSwitchCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public TypeCaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeCaseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeCaseClause(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeCaseClause(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeCaseClauseContext typeCaseClause() {
		TypeCaseClauseContext _localctx = new TypeCaseClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_typeCaseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528;
			typeSwitchCase();
			State = 529;
			Match(COLON);
			State = 531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 530;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSwitchCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public TypeSwitchCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSwitchCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeSwitchCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeSwitchCase(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeSwitchCase(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeSwitchCaseContext typeSwitchCase() {
		TypeSwitchCaseContext _localctx = new TypeSwitchCaseContext(Context, State);
		EnterRule(_localctx, 86, RULE_typeSwitchCase);
		try {
			State = 536;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				Match(CASE);
				State = 534;
				typeList();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NIL_LIT() { return GetTokens(GoParser.NIL_LIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT(int i) {
			return GetToken(GoParser.NIL_LIT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 88, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				{
				State = 538;
				type_();
				}
				break;
			case NIL_LIT:
				{
				State = 539;
				Match(NIL_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 549;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 542;
				Match(COMMA);
				State = 545;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FUNC:
				case INTERFACE:
				case MAP:
				case STRUCT:
				case CHAN:
				case IDENTIFIER:
				case L_PAREN:
				case L_BRACKET:
				case STAR:
				case RECEIVE:
					{
					State = 543;
					type_();
					}
					break;
				case NIL_LIT:
					{
					State = 544;
					Match(NIL_LIT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				State = 551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(GoParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommClauseContext[] commClause() {
			return GetRuleContexts<CommClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommClauseContext commClause(int i) {
			return GetRuleContext<CommClauseContext>(i);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSelectStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSelectStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSelectStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public SelectStmtContext selectStmt() {
		SelectStmtContext _localctx = new SelectStmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_selectStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(SELECT);
			State = 553;
			Match(L_CURLY);
			State = 557;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==CASE) {
				{
				{
				State = 554;
				commClause();
				}
				}
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 560;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommCaseContext commCase() {
			return GetRuleContext<CommCaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CommClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCommClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCommClause(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitCommClause(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public CommClauseContext commClause() {
		CommClauseContext _localctx = new CommClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_commClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562;
			commCase();
			State = 563;
			Match(COLON);
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 564;
				statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(GoParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SendStmtContext sendStmt() {
			return GetRuleContext<SendStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecvStmtContext recvStmt() {
			return GetRuleContext<RecvStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(GoParser.DEFAULT, 0); }
		public CommCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCommCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCommCase(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitCommCase(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public CommCaseContext commCase() {
		CommCaseContext _localctx = new CommCaseContext(Context, State);
		EnterRule(_localctx, 94, RULE_commCase);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				Match(CASE);
				State = 570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 568;
					sendStmt();
					}
					break;
				case 2:
					{
					State = 569;
					recvStmt();
					}
					break;
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecvStmtContext : ParserRuleContext {
		public ExpressionContext recvExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public RecvStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recvStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterRecvStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitRecvStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitRecvStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public RecvStmtContext recvStmt() {
		RecvStmtContext _localctx = new RecvStmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_recvStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 575;
				expressionList();
				State = 576;
				Match(ASSIGN);
				}
				break;
			case 2:
				{
				State = 578;
				identifierList();
				State = 579;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 583;
			_localctx.recvExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(GoParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForClauseContext forClause() {
			return GetRuleContext<ForClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeClauseContext rangeClause() {
			return GetRuleContext<RangeClauseContext>(0);
		}
		public ForStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitForStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ForStmtContext forStmt() {
		ForStmtContext _localctx = new ForStmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_forStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(FOR);
			State = 593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 586;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 589;
				forClause();
				}
				break;
			case 3:
				{
				State = 591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << RANGE) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 590;
					rangeClause();
					}
				}

				}
				break;
			}
			State = 595;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForClauseContext : ParserRuleContext {
		public SimpleStmtContext initStmt;
		public SimpleStmtContext postStmt;
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext[] simpleStmt() {
			return GetRuleContexts<SimpleStmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStmtContext simpleStmt(int i) {
			return GetRuleContext<SimpleStmtContext>(i);
		}
		public ForClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterForClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitForClause(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitForClause(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ForClauseContext forClause() {
		ForClauseContext _localctx = new ForClauseContext(Context, State);
		EnterRule(_localctx, 100, RULE_forClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 597;
				_localctx.initStmt = simpleStmt();
				}
				break;
			}
			State = 600;
			eos();
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 601;
				expression(0);
				}
				break;
			}
			State = 604;
			eos();
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 605;
				_localctx.postStmt = simpleStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(GoParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(GoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_ASSIGN() { return GetToken(GoParser.DECLARE_ASSIGN, 0); }
		public RangeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterRangeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitRangeClause(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitRangeClause(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public RangeClauseContext rangeClause() {
		RangeClauseContext _localctx = new RangeClauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_rangeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 608;
				expressionList();
				State = 609;
				Match(ASSIGN);
				}
				break;
			case 2:
				{
				State = 611;
				identifierList();
				State = 612;
				Match(DECLARE_ASSIGN);
				}
				break;
			}
			State = 616;
			Match(RANGE);
			State = 617;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GO() { return GetToken(GoParser.GO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GoStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterGoStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitGoStmt(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitGoStmt(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public GoStmtContext goStmt() {
		GoStmtContext _localctx = new GoStmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_goStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			Match(GO);
			State = 620;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeLitContext typeLit() {
			return GetRuleContext<TypeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitType_(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 106, RULE_type_);
		try {
			State = 628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 622;
				typeName();
				}
				break;
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623;
				typeLit();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 624;
				Match(L_PAREN);
				State = 625;
				type_();
				State = 626;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentContext qualifiedIdent() {
			return GetRuleContext<QualifiedIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 108, RULE_typeName);
		try {
			State = 632;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 630;
				qualifiedIdent();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 631;
				Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InterfaceTypeContext interfaceType() {
			return GetRuleContext<InterfaceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelTypeContext channelType() {
			return GetRuleContext<ChannelTypeContext>(0);
		}
		public TypeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeLit(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeLit(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeLitContext typeLit() {
		TypeLitContext _localctx = new TypeLitContext(Context, State);
		EnterRule(_localctx, 110, RULE_typeLit);
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 634;
				arrayType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 635;
				structType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 636;
				pointerType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 637;
				functionType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 638;
				interfaceType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 639;
				sliceType();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 640;
				mapType();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 641;
				channelType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLengthContext arrayLength() {
			return GetRuleContext<ArrayLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitArrayType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ArrayTypeContext arrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_arrayType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(L_BRACKET);
			State = 645;
			arrayLength();
			State = 646;
			Match(R_BRACKET);
			State = 647;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArrayLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArrayLength(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitArrayLength(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ArrayLengthContext arrayLength() {
		ArrayLengthContext _localctx = new ArrayLengthContext(Context, State);
		EnterRule(_localctx, 114, RULE_arrayLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ElementTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElementType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElementType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitElementType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ElementTypeContext elementType() {
		ElementTypeContext _localctx = new ElementTypeContext(Context, State);
		EnterRule(_localctx, 116, RULE_elementType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitPointerType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public PointerTypeContext pointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 118, RULE_pointerType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(STAR);
			State = 654;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(GoParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSpecContext[] methodSpec() {
			return GetRuleContexts<MethodSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodSpecContext methodSpec(int i) {
			return GetRuleContext<MethodSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		public InterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterInterfaceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitInterfaceType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitInterfaceType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public InterfaceTypeContext interfaceType() {
		InterfaceTypeContext _localctx = new InterfaceTypeContext(Context, State);
		EnterRule(_localctx, 120, RULE_interfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(INTERFACE);
			State = 657;
			Match(L_CURLY);
			State = 666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 660;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 658;
					methodSpec();
					}
					break;
				case 2:
					{
					State = 659;
					typeName();
					}
					break;
				}
				State = 662;
				eos();
				}
				}
				State = 668;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 669;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public SliceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSliceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSliceType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSliceType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public SliceTypeContext sliceType() {
		SliceTypeContext _localctx = new SliceTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_sliceType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(L_BRACKET);
			State = 672;
			Match(R_BRACKET);
			State = 673;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(GoParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMapType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitMapType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(MAP);
			State = 676;
			Match(L_BRACKET);
			State = 677;
			type_();
			State = 678;
			Match(R_BRACKET);
			State = 679;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAN() { return GetToken(GoParser.CHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		public ChannelTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterChannelType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitChannelType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitChannelType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ChannelTypeContext channelType() {
		ChannelTypeContext _localctx = new ChannelTypeContext(Context, State);
		EnterRule(_localctx, 126, RULE_channelType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 681;
				Match(CHAN);
				}
				break;
			case 2:
				{
				State = 682;
				Match(CHAN);
				State = 683;
				Match(RECEIVE);
				}
				break;
			case 3:
				{
				State = 684;
				Match(RECEIVE);
				State = 685;
				Match(CHAN);
				}
				break;
			}
			State = 688;
			elementType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public MethodSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodSpec(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitMethodSpec(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public MethodSpecContext methodSpec() {
		MethodSpecContext _localctx = new MethodSpecContext(Context, State);
		EnterRule(_localctx, 128, RULE_methodSpec);
		try {
			State = 696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 690;
				Match(IDENTIFIER);
				State = 691;
				parameters();
				State = 692;
				result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 694;
				Match(IDENTIFIER);
				State = 695;
				parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 130, RULE_functionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			Match(FUNC);
			State = 699;
			signature();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultContext result() {
			return GetRuleContext<ResultContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSignature(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 132, RULE_signature);
		try {
			State = 705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701;
				parameters();
				State = 702;
				result();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 704;
				parameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ResultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterResult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitResult(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitResult(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ResultContext result() {
		ResultContext _localctx = new ResultContext(Context, State);
		EnterRule(_localctx, 134, RULE_result);
		try {
			State = 709;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707;
				parameters();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708;
				type_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext[] parameterDecl() {
			return GetRuleContexts<ParameterDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterDeclContext parameterDecl(int i) {
			return GetRuleContext<ParameterDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitParameters(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 136, RULE_parameters);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 711;
			Match(L_PAREN);
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << ELLIPSIS) | (1L << STAR) | (1L << RECEIVE))) != 0)) {
				{
				State = 712;
				parameterDecl();
				State = 717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 713;
						Match(COMMA);
						State = 714;
						parameterDecl();
						}
						} 
					}
					State = 719;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 720;
					Match(COMMA);
					}
				}

				}
			}

			State = 725;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		public ParameterDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterParameterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitParameterDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitParameterDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ParameterDeclContext parameterDecl() {
		ParameterDeclContext _localctx = new ParameterDeclContext(Context, State);
		EnterRule(_localctx, 138, RULE_parameterDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 727;
				identifierList();
				}
				break;
			}
			State = 731;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 730;
				Match(ELLIPSIS);
				}
			}

			State = 733;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken unary_op;
		public IToken mul_op;
		public IToken add_op;
		public IToken rel_op;
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(GoParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(GoParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION() { return GetToken(GoParser.EXCLAMATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARET() { return GetToken(GoParser.CARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(GoParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECEIVE() { return GetToken(GoParser.RECEIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(GoParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(GoParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(GoParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(GoParser.RSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_CLEAR() { return GetToken(GoParser.BIT_CLEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(GoParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(GoParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(GoParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(GoParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(GoParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(GoParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(GoParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND() { return GetToken(GoParser.LOGICAL_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR() { return GetToken(GoParser.LOGICAL_OR, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitExpression(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 140;
		EnterRecursionRule(_localctx, 140, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 736;
				primaryExpr(0);
				}
				break;
			case 2:
				{
				State = 737;
				_localctx.unary_op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0)) ) {
					_localctx.unary_op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 738;
				expression(6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 758;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 756;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 741;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 742;
						_localctx.mul_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIV) | (1L << MOD) | (1L << LSHIFT) | (1L << RSHIFT) | (1L << BIT_CLEAR) | (1L << STAR) | (1L << AMPERSAND))) != 0)) ) {
							_localctx.mul_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 743;
						expression(6);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 744;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 745;
						_localctx.add_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << PLUS) | (1L << MINUS) | (1L << CARET))) != 0)) ) {
							_localctx.add_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 746;
						expression(5);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 747;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 748;
						_localctx.rel_op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUALS) | (1L << NOT_EQUALS) | (1L << LESS) | (1L << LESS_OR_EQUALS) | (1L << GREATER) | (1L << GREATER_OR_EQUALS))) != 0)) ) {
							_localctx.rel_op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 749;
						expression(4);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 750;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 751;
						Match(LOGICAL_AND);
						State = 752;
						expression(3);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 753;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 754;
						Match(LOGICAL_OR);
						State = 755;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 760;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConversionContext conversion() {
			return GetRuleContext<ConversionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodExprContext methodExpr() {
			return GetRuleContext<MethodExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Slice_Context slice_() {
			return GetRuleContext<Slice_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeAssertionContext typeAssertion() {
			return GetRuleContext<TypeAssertionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpr(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitPrimaryExpr(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		return primaryExpr(0);
	}

	private PrimaryExprContext primaryExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, _parentState);
		PrimaryExprContext _prevctx = _localctx;
		int _startState = 142;
		EnterRecursionRule(_localctx, 142, RULE_primaryExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 762;
				operand();
				}
				break;
			case 2:
				{
				State = 763;
				conversion();
				}
				break;
			case 3:
				{
				State = 764;
				methodExpr();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 778;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primaryExpr);
					State = 767;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 774;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
					case 1:
						{
						State = 768;
						Match(DOT);
						State = 769;
						Match(IDENTIFIER);
						}
						break;
					case 2:
						{
						State = 770;
						index();
						}
						break;
					case 3:
						{
						State = 771;
						slice_();
						}
						break;
					case 4:
						{
						State = 772;
						typeAssertion();
						}
						break;
					case 5:
						{
						State = 773;
						arguments();
						}
						break;
					}
					}
					} 
				}
				State = 780;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,84,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConversionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GoParser.COMMA, 0); }
		public ConversionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterConversion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitConversion(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitConversion(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ConversionContext conversion() {
		ConversionContext _localctx = new ConversionContext(Context, State);
		EnterRule(_localctx, 144, RULE_conversion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			nonNamedType();
			State = 782;
			Match(L_PAREN);
			State = 783;
			expression(0);
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 784;
				Match(COMMA);
				}
			}

			State = 787;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonNamedTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeLitContext typeLit() {
			return GetRuleContext<TypeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public NonNamedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonNamedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterNonNamedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitNonNamedType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitNonNamedType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public NonNamedTypeContext nonNamedType() {
		NonNamedTypeContext _localctx = new NonNamedTypeContext(Context, State);
		EnterRule(_localctx, 146, RULE_nonNamedType);
		try {
			State = 794;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case L_BRACKET:
			case STAR:
			case RECEIVE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 789;
				typeLit();
				}
				break;
			case L_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 790;
				Match(L_PAREN);
				State = 791;
				nonNamedType();
				State = 792;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandNameContext operandName() {
			return GetRuleContext<OperandNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperand(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 148, RULE_operand);
		try {
			State = 802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797;
				operandName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 798;
				Match(L_PAREN);
				State = 799;
				expression(0);
				State = 800;
				Match(R_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BasicLitContext basicLit() {
			return GetRuleContext<BasicLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompositeLitContext compositeLit() {
			return GetRuleContext<CompositeLitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionLitContext functionLit() {
			return GetRuleContext<FunctionLitContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 150, RULE_literal);
		try {
			State = 807;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 804;
				basicLit();
				}
				break;
			case MAP:
			case STRUCT:
			case IDENTIFIER:
			case L_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805;
				compositeLit();
				}
				break;
			case FUNC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 806;
				functionLit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BasicLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL_LIT() { return GetToken(GoParser.NIL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LIT() { return GetToken(GoParser.FLOAT_LIT, 0); }
		public BasicLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_basicLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterBasicLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitBasicLit(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitBasicLit(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public BasicLitContext basicLit() {
		BasicLitContext _localctx = new BasicLitContext(Context, State);
		EnterRule(_localctx, 152, RULE_basicLit);
		try {
			State = 813;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 809;
				Match(NIL_LIT);
				}
				break;
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				integer();
				}
				break;
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 811;
				string_();
				}
				break;
			case FLOAT_LIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 812;
				Match(FLOAT_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LIT() { return GetToken(GoParser.DECIMAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_LIT() { return GetToken(GoParser.BINARY_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTAL_LIT() { return GetToken(GoParser.OCTAL_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_LIT() { return GetToken(GoParser.HEX_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMAGINARY_LIT() { return GetToken(GoParser.IMAGINARY_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RUNE_LIT() { return GetToken(GoParser.RUNE_LIT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitInteger(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 154, RULE_integer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public OperandNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operandName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterOperandName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitOperandName(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitOperandName(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public OperandNameContext operandName() {
		OperandNameContext _localctx = new OperandNameContext(Context, State);
		EnterRule(_localctx, 156, RULE_operandName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(GoParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GoParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		public QualifiedIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdent(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitQualifiedIdent(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public QualifiedIdentContext qualifiedIdent() {
		QualifiedIdentContext _localctx = new QualifiedIdentContext(Context, State);
		EnterRule(_localctx, 158, RULE_qualifiedIdent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			Match(IDENTIFIER);
			State = 820;
			Match(DOT);
			State = 821;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompositeLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralTypeContext literalType() {
			return GetRuleContext<LiteralTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public CompositeLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compositeLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterCompositeLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitCompositeLit(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitCompositeLit(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public CompositeLitContext compositeLit() {
		CompositeLitContext _localctx = new CompositeLitContext(Context, State);
		EnterRule(_localctx, 160, RULE_compositeLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			literalType();
			State = 824;
			literalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementTypeContext elementType() {
			return GetRuleContext<ElementTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SliceTypeContext sliceType() {
			return GetRuleContext<SliceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public LiteralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteralType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteralType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitLiteralType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public LiteralTypeContext literalType() {
		LiteralTypeContext _localctx = new LiteralTypeContext(Context, State);
		EnterRule(_localctx, 162, RULE_literalType);
		try {
			State = 835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826;
				structType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827;
				arrayType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 828;
				Match(L_BRACKET);
				State = 829;
				Match(ELLIPSIS);
				State = 830;
				Match(R_BRACKET);
				State = 831;
				elementType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 832;
				sliceType();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 833;
				mapType();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 834;
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(GoParser.COMMA, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitLiteralValue(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(Context, State);
		EnterRule(_localctx, 164, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			Match(L_CURLY);
			State = 842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_CURLY) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 838;
				elementList();
				State = 840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 839;
					Match(COMMA);
					}
				}

				}
			}

			State = 844;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyedElementContext[] keyedElement() {
			return GetRuleContexts<KeyedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyedElementContext keyedElement(int i) {
			return GetRuleContext<KeyedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitElementList(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 166, RULE_elementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			keyedElement();
			State = 851;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 847;
					Match(COMMA);
					State = 848;
					keyedElement();
					}
					} 
				}
				State = 853;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,93,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element() {
			return GetRuleContext<ElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(GoParser.COLON, 0); }
		public KeyedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterKeyedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitKeyedElement(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitKeyedElement(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public KeyedElementContext keyedElement() {
		KeyedElementContext _localctx = new KeyedElementContext(Context, State);
		EnterRule(_localctx, 168, RULE_keyedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 854;
				key();
				State = 855;
				Match(COLON);
				}
				break;
			}
			State = 859;
			element();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitKey(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 170, RULE_key);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case NIL_LIT:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case EXCLAMATION:
			case PLUS:
			case MINUS:
			case CARET:
			case STAR:
			case AMPERSAND:
			case RECEIVE:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 861;
				expression(0);
				}
				break;
			case L_CURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 862;
				literalValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitElement(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitElement(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 172, RULE_element);
		try {
			State = 867;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FUNC:
			case INTERFACE:
			case MAP:
			case STRUCT:
			case CHAN:
			case NIL_LIT:
			case IDENTIFIER:
			case L_PAREN:
			case L_BRACKET:
			case EXCLAMATION:
			case PLUS:
			case MINUS:
			case CARET:
			case STAR:
			case AMPERSAND:
			case RECEIVE:
			case DECIMAL_LIT:
			case BINARY_LIT:
			case OCTAL_LIT:
			case HEX_LIT:
			case FLOAT_LIT:
			case IMAGINARY_LIT:
			case RUNE_LIT:
			case RAW_STRING_LIT:
			case INTERPRETED_STRING_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865;
				expression(0);
				}
				break;
			case L_CURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				literalValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(GoParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_CURLY() { return GetToken(GoParser.L_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_CURLY() { return GetToken(GoParser.R_CURLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext[] fieldDecl() {
			return GetRuleContexts<FieldDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclContext fieldDecl(int i) {
			return GetRuleContext<FieldDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitStructType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitStructType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_structType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			Match(STRUCT);
			State = 870;
			Match(L_CURLY);
			State = 876;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==STAR) {
				{
				{
				State = 871;
				fieldDecl();
				State = 872;
				eos();
				}
				}
				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 879;
			Match(R_CURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclContext : ParserRuleContext {
		public String_Context tag;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedFieldContext embeddedField() {
			return GetRuleContext<EmbeddedFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_Context string_() {
			return GetRuleContext<String_Context>(0);
		}
		public FieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFieldDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFieldDecl(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFieldDecl(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public FieldDeclContext fieldDecl() {
		FieldDeclContext _localctx = new FieldDeclContext(Context, State);
		EnterRule(_localctx, 176, RULE_fieldDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 881;
				identifierList();
				State = 882;
				type_();
				}
				break;
			case 2:
				{
				State = 884;
				embeddedField();
				}
				break;
			}
			State = 888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 887;
				_localctx.tag = string_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAW_STRING_LIT() { return GetToken(GoParser.RAW_STRING_LIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERPRETED_STRING_LIT() { return GetToken(GoParser.INTERPRETED_STRING_LIT, 0); }
		public String_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterString_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitString_(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitString_(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public String_Context string_() {
		String_Context _localctx = new String_Context(Context, State);
		EnterRule(_localctx, 178, RULE_string_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 890;
			_la = TokenStream.LA(1);
			if ( !(_la==RAW_STRING_LIT || _la==INTERPRETED_STRING_LIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(GoParser.STAR, 0); }
		public EmbeddedFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedField(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitEmbeddedField(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public EmbeddedFieldContext embeddedField() {
		EmbeddedFieldContext _localctx = new EmbeddedFieldContext(Context, State);
		EnterRule(_localctx, 180, RULE_embeddedField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STAR) {
				{
				State = 892;
				Match(STAR);
				}
			}

			State = 895;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionLitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNC() { return GetToken(GoParser.FUNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionLitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionLit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterFunctionLit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitFunctionLit(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitFunctionLit(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public FunctionLitContext functionLit() {
		FunctionLitContext _localctx = new FunctionLitContext(Context, State);
		EnterRule(_localctx, 182, RULE_functionLit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897;
			Match(FUNC);
			State = 898;
			signature();
			State = 899;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitIndex(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 184, RULE_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			Match(L_BRACKET);
			State = 902;
			expression(0);
			State = 903;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(GoParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(GoParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON() { return GetTokens(GoParser.COLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON(int i) {
			return GetToken(GoParser.COLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Slice_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterSlice_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitSlice_(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitSlice_(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public Slice_Context slice_() {
		Slice_Context _localctx = new Slice_Context(Context, State);
		EnterRule(_localctx, 186, RULE_slice_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			Match(L_BRACKET);
			State = 921;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 906;
					expression(0);
					}
				}

				State = 909;
				Match(COLON);
				State = 911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 910;
					expression(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
					{
					State = 913;
					expression(0);
					}
				}

				State = 916;
				Match(COLON);
				State = 917;
				expression(0);
				State = 918;
				Match(COLON);
				State = 919;
				expression(0);
				}
				break;
			}
			State = 923;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeAssertionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		public TypeAssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAssertion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterTypeAssertion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitTypeAssertion(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitTypeAssertion(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public TypeAssertionContext typeAssertion() {
		TypeAssertionContext _localctx = new TypeAssertionContext(Context, State);
		EnterRule(_localctx, 188, RULE_typeAssertion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 925;
			Match(DOT);
			State = 926;
			Match(L_PAREN);
			State = 927;
			type_();
			State = 928;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(GoParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(GoParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(GoParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(GoParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(GoParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitArguments(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 190, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(L_PAREN);
			State = 945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FUNC) | (1L << INTERFACE) | (1L << MAP) | (1L << STRUCT) | (1L << CHAN) | (1L << NIL_LIT) | (1L << IDENTIFIER) | (1L << L_PAREN) | (1L << L_BRACKET) | (1L << EXCLAMATION) | (1L << PLUS) | (1L << MINUS) | (1L << CARET) | (1L << STAR) | (1L << AMPERSAND) | (1L << RECEIVE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DECIMAL_LIT - 64)) | (1L << (BINARY_LIT - 64)) | (1L << (OCTAL_LIT - 64)) | (1L << (HEX_LIT - 64)) | (1L << (FLOAT_LIT - 64)) | (1L << (IMAGINARY_LIT - 64)) | (1L << (RUNE_LIT - 64)) | (1L << (RAW_STRING_LIT - 64)) | (1L << (INTERPRETED_STRING_LIT - 64)))) != 0)) {
				{
				State = 937;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 931;
					expressionList();
					}
					break;
				case 2:
					{
					State = 932;
					nonNamedType();
					State = 935;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
					case 1:
						{
						State = 933;
						Match(COMMA);
						State = 934;
						expressionList();
						}
						break;
					}
					}
					break;
				}
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELLIPSIS) {
					{
					State = 939;
					Match(ELLIPSIS);
					}
				}

				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 942;
					Match(COMMA);
					}
				}

				}
			}

			State = 947;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonNamedTypeContext nonNamedType() {
			return GetRuleContext<NonNamedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(GoParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(GoParser.IDENTIFIER, 0); }
		public MethodExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterMethodExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitMethodExpr(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitMethodExpr(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public MethodExprContext methodExpr() {
		MethodExprContext _localctx = new MethodExprContext(Context, State);
		EnterRule(_localctx, 192, RULE_methodExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			nonNamedType();
			State = 950;
			Match(DOT);
			State = 951;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReceiverTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ReceiverTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receiverType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterReceiverType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitReceiverType(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitReceiverType(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public ReceiverTypeContext receiverType() {
		ReceiverTypeContext _localctx = new ReceiverTypeContext(Context, State);
		EnterRule(_localctx, 194, RULE_receiverType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(GoParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(GoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EOS() { return GetToken(GoParser.EOS, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGoParserListener typedListener = listener as IGoParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
        public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
        {
            IGoParserVisitor<TResult> typedVisitor = visitor as IGoParserVisitor<TResult>;
            if (typedVisitor != null) return typedVisitor.VisitEos(this);
            else return visitor.VisitChildren(this);
        }
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 196, RULE_eos);
		try {
			State = 959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 955;
				Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 956;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957;
				Match(EOS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 958;
				if (!(this.closingBracket())) throw new FailedPredicateException(this, "this.closingBracket()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return statementList_sempred((StatementListContext)_localctx, predIndex);
		case 70: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 71: return primaryExpr_sempred((PrimaryExprContext)_localctx, predIndex);
		case 98: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statementList_sempred(StatementListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.closingBracket();
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}
	private bool primaryExpr_sempred(PrimaryExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.closingBracket();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'Z', '\x3C4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\xCE', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\xD1', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\xD6', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xDA', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xDD', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', '\xEA', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\xED', '\v', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\xF0', '\n', '\x4', '\x3', '\x5', 
		'\x5', '\x5', '\xF3', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\xFC', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', '\x104', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\x107', '\v', '\b', '\x3', '\b', '\x5', '\b', '\x10A', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x10E', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x112', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x117', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x11A', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x11F', '\n', '\v', '\f', '\v', '\xE', '\v', '\x122', '\v', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x12A', '\n', '\f', '\f', '\f', '\xE', '\f', '\x12D', 
		'\v', '\f', '\x3', '\f', '\x5', '\f', '\x130', '\n', '\f', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x134', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x13C', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x143', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x14D', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x150', '\v', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x153', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x159', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x15D', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x161', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x5', '\x14', '\x166', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x169', 
		'\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x16C', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x6', '\x14', '\x171', '\n', '\x14', 
		'\r', '\x14', '\xE', '\x14', '\x172', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x184', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x18B', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x5', '\x1B', '\x19B', '\n', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x1A8', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x1AC', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1B0', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x1B4', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x1C7', 
		'\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', 
		'\x1CD', '\n', '%', '\x5', '%', '\x1CF', '\n', '%', '\x3', '&', '\x3', 
		'&', '\x5', '&', '\x1D3', '\n', '&', '\x3', '\'', '\x3', '\'', '\x5', 
		'\'', '\x1D7', '\n', '\'', '\x3', '\'', '\x5', '\'', '\x1DA', '\n', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x1DE', '\n', '\'', '\x5', '\'', 
		'\x1E0', '\n', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', '\x1E4', '\n', 
		'\'', '\f', '\'', '\xE', '\'', '\x1E7', '\v', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1EE', '\n', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1F3', '\n', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x5', '*', '\x1FE', '\n', '*', '\x3', '*', 
		'\x3', '*', '\a', '*', '\x202', '\n', '*', '\f', '*', '\xE', '*', '\x205', 
		'\v', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x20B', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x216', 
		'\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x21B', '\n', 
		'-', '\x3', '.', '\x3', '.', '\x5', '.', '\x21F', '\n', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x224', '\n', '.', '\a', '.', '\x226', 
		'\n', '.', '\f', '.', '\xE', '.', '\x229', '\v', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\a', '/', '\x22E', '\n', '/', '\f', '/', '\xE', '/', 
		'\x231', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x5', '\x30', '\x238', '\n', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x23D', '\n', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x240', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x248', 
		'\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x5', '\x33', '\x24E', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', 
		'\x33', '\x252', '\n', '\x33', '\x5', '\x33', '\x254', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x5', '\x34', '\x259', '\n', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x25D', '\n', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x5', '\x34', '\x261', '\n', '\x34', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x5', '\x35', '\x269', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', 
		'\x37', '\x277', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', 
		'\x27B', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x285', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x5', '>', '\x297', '\n', '>', '\x3', '>', '\x3', '>', '\a', '>', 
		'\x29B', '\n', '>', '\f', '>', '\xE', '>', '\x29E', '\v', '>', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', 
		'\x41', '\x2B1', '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x5', '\x42', '\x2BB', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x2C4', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', 
		'\x2C8', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\a', '\x46', '\x2CE', '\n', '\x46', '\f', '\x46', '\xE', '\x46', 
		'\x2D1', '\v', '\x46', '\x3', '\x46', '\x5', '\x46', '\x2D4', '\n', '\x46', 
		'\x5', '\x46', '\x2D6', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x5', 'G', '\x2DB', '\n', 'G', '\x3', 'G', '\x5', 'G', '\x2DE', 
		'\n', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x5', 'H', '\x2E6', '\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\a', 'H', '\x2F7', '\n', 'H', '\f', 'H', '\xE', 'H', '\x2FA', '\v', 
		'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x300', 
		'\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x5', 'I', '\x309', '\n', 'I', '\a', 'I', '\x30B', 
		'\n', 'I', '\f', 'I', '\xE', 'I', '\x30E', '\v', 'I', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x314', '\n', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x5', 'K', '\x31D', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x325', '\n', 'L', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x5', 'M', '\x32A', '\n', 'M', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x330', '\n', 'N', '\x3', 'O', 
		'\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x5', 'S', '\x346', '\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x5', 'T', '\x34B', '\n', 'T', '\x5', 'T', '\x34D', '\n', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\a', 'U', '\x354', 
		'\n', 'U', '\f', 'U', '\xE', 'U', '\x357', '\v', 'U', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x5', 'V', '\x35C', '\n', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'W', '\x3', 'W', '\x5', 'W', '\x362', '\n', 'W', '\x3', 'X', '\x3', 
		'X', '\x5', 'X', '\x366', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\x36D', '\n', 'Y', '\f', 'Y', '\xE', 
		'Y', '\x370', '\v', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Z', '\x3', 'Z', 
		'\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x378', '\n', 'Z', '\x3', 'Z', '\x5', 
		'Z', '\x37B', '\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '\\', '\x5', '\\', 
		'\x380', '\n', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', 
		'\x3', '_', '\x3', '_', '\x5', '_', '\x38E', '\n', '_', '\x3', '_', '\x3', 
		'_', '\x5', '_', '\x392', '\n', '_', '\x3', '_', '\x5', '_', '\x395', 
		'\n', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x5', '_', '\x39C', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x3AA', '\n', 
		'\x61', '\x5', '\x61', '\x3AC', '\n', '\x61', '\x3', '\x61', '\x5', '\x61', 
		'\x3AF', '\n', '\x61', '\x3', '\x61', '\x5', '\x61', '\x3B2', '\n', '\x61', 
		'\x5', '\x61', '\x3B4', '\n', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', 
		'\x64', '\x3C2', '\n', '\x64', '\x3', '\x64', '\x2', '\x4', '\x8E', '\x90', 
		'\x65', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\x2', '\f', '\x4', '\x2', '\x1D', '\x1D', 
		'(', '(', '\x3', '\x2', ')', '*', '\x4', '\x2', '\x35', ':', '<', '@', 
		'\x4', '\x2', '&', '&', 'Y', 'Y', '\x3', '\x2', ';', '\x41', '\x4', '\x2', 
		'\x36', ':', '?', '@', '\x4', '\x2', '\x35', '\x35', '<', '>', '\x3', 
		'\x2', '/', '\x34', '\x4', '\x2', '\x42', '\x45', 'I', 'J', '\x3', '\x2', 
		'P', 'Q', '\x2', '\x400', '\x2', '\xC8', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\x6', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\xF2', '\x3', '\x2', '\x2', '\x2', '\n', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\x10', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x113', '\x3', '\x2', '\x2', '\x2', '\x14', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x123', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x144', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x146', '\x3', '\x2', '\x2', '\x2', '\"', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x170', '\x3', '\x2', '\x2', '\x2', '(', '\x183', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x18A', '\x3', '\x2', '\x2', '\x2', ',', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x192', '\x3', '\x2', '\x2', '\x2', '\x32', '\x195', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x36', '\x19E', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1A4', '\x3', '\x2', '\x2', '\x2', '<', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1AD', '\x3', '\x2', '\x2', '\x2', '@', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1BA', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x1BD', '\x3', '\x2', '\x2', '\x2', 'J', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x1D4', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x1EA', '\x3', '\x2', '\x2', '\x2', 'P', '\x1F2', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1F4', '\x3', '\x2', '\x2', '\x2', 'T', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x212', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x21A', '\x3', '\x2', '\x2', '\x2', 'Z', '\x21E', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x22A', '\x3', '\x2', '\x2', '\x2', '^', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x247', '\x3', '\x2', '\x2', '\x2', '\x64', '\x24B', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x258', '\x3', '\x2', '\x2', '\x2', 'h', '\x268', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x26D', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x276', '\x3', '\x2', '\x2', '\x2', 'n', '\x27A', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x284', '\x3', '\x2', '\x2', '\x2', 'r', '\x286', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x28B', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x28D', '\x3', '\x2', '\x2', '\x2', 'x', '\x28F', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x292', '\x3', '\x2', '\x2', '\x2', '|', '\x2A1', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x82', '\x2BA', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x86', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x2C7', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x2DA', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x90', '\x2FF', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x30F', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x96', '\x324', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x329', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x32F', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x333', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x335', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x339', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x345', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x347', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x350', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x35B', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x361', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x365', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x367', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x377', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x37C', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x37F', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x387', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x38B', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x39F', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x3B7', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x3BB', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x5', '\x4', 
		'\x3', '\x2', '\xC9', '\xCF', '\x5', '\xC6', '\x64', '\x2', '\xCA', '\xCB', 
		'\x5', '\x6', '\x4', '\x2', '\xCB', '\xCC', '\x5', '\xC6', '\x64', '\x2', 
		'\xCC', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD6', '\x5', '\x1A', '\xE', '\x2', '\xD3', '\xD6', 
		'\x5', '\x1C', '\xF', '\x2', '\xD4', '\xD6', '\x5', '\f', '\a', '\x2', 
		'\xD5', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x5', '\xC6', '\x64', '\x2', 
		'\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xDF', '\a', '\x2', '\x2', '\x3', '\xDF', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x10', '\x2', '\x2', 
		'\xE1', '\xE2', '\a', '\x1D', '\x2', '\x2', '\xE2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xE3', '\xEF', '\a', '\x19', '\x2', '\x2', '\xE4', '\xF0', 
		'\x5', '\b', '\x5', '\x2', '\xE5', '\xEB', '\a', '\x1E', '\x2', '\x2', 
		'\xE6', '\xE7', '\x5', '\b', '\x5', '\x2', '\xE7', '\xE8', '\x5', '\xC6', 
		'\x64', '\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\xEC', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', '\a', '\x1F', '\x2', '\x2', 
		'\xEF', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\a', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF3', 
		'\t', '\x2', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xF5', '\x5', '\n', '\x6', '\x2', '\xF5', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x5', '\xB4', '[', '\x2', 
		'\xF7', '\v', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFC', '\x5', '\xE', 
		'\b', '\x2', '\xF9', '\xFC', '\x5', '\x16', '\f', '\x2', '\xFA', '\xFC', 
		'\x5', ' ', '\x11', '\x2', '\xFB', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFA', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\r', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x109', 
		'\a', '\x12', '\x2', '\x2', '\xFE', '\x10A', '\x5', '\x10', '\t', '\x2', 
		'\xFF', '\x105', '\a', '\x1E', '\x2', '\x2', '\x100', '\x101', '\x5', 
		'\x10', '\t', '\x2', '\x101', '\x102', '\x5', '\xC6', '\x64', '\x2', '\x102', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x107', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x108', '\x3', '\x2', '\x2', '\x2', '\x107', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x10A', '\a', '\x1F', '\x2', '\x2', '\x109', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x109', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\xF', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x111', '\x5', 
		'\x12', '\n', '\x2', '\x10C', '\x10E', '\x5', 'l', '\x37', '\x2', '\x10D', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', 
		'\a', '$', '\x2', '\x2', '\x110', '\x112', '\x5', '\x14', '\v', '\x2', 
		'\x111', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x11', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x118', '\a', '\x1D', '\x2', '\x2', '\x114', '\x115', '\a', '%', '\x2', 
		'\x2', '\x115', '\x117', '\a', '\x1D', '\x2', '\x2', '\x116', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x13', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x118', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x120', '\x5', '\x8E', 
		'H', '\x2', '\x11C', '\x11D', '\a', '%', '\x2', '\x2', '\x11D', '\x11F', 
		'\x5', '\x8E', 'H', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x12F', '\a', '\x16', '\x2', '\x2', '\x124', '\x130', 
		'\x5', '\x18', '\r', '\x2', '\x125', '\x12B', '\a', '\x1E', '\x2', '\x2', 
		'\x126', '\x127', '\x5', '\x18', '\r', '\x2', '\x127', '\x128', '\x5', 
		'\xC6', '\x64', '\x2', '\x128', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x126', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x130', '\a', 
		'\x1F', '\x2', '\x2', '\x12F', '\x124', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x125', '\x3', '\x2', '\x2', '\x2', '\x130', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x133', '\a', '\x1D', '\x2', '\x2', '\x132', '\x134', 
		'\a', '$', '\x2', '\x2', '\x133', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x136', '\x5', 'l', '\x37', '\x2', '\x136', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', '\x5', '\x2', 
		'\x2', '\x138', '\x139', '\a', '\x1D', '\x2', '\x2', '\x139', '\x13B', 
		'\x5', '\x86', '\x44', '\x2', '\x13A', '\x13C', '\x5', '$', '\x13', '\x2', 
		'\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13E', '\a', '\x5', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\x1E', '\x10', 
		'\x2', '\x13F', '\x140', '\a', '\x1D', '\x2', '\x2', '\x140', '\x142', 
		'\x5', '\x86', '\x44', '\x2', '\x141', '\x143', '\x5', '$', '\x13', '\x2', 
		'\x142', '\x141', '\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\x5', '\x8A', '\x46', '\x2', '\x145', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x146', '\x152', '\a', '\x1B', '\x2', '\x2', '\x147', '\x153', 
		'\x5', '\"', '\x12', '\x2', '\x148', '\x14E', '\a', '\x1E', '\x2', '\x2', 
		'\x149', '\x14A', '\x5', '\"', '\x12', '\x2', '\x14A', '\x14B', '\x5', 
		'\xC6', '\x64', '\x2', '\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x151', '\x153', '\a', 
		'\x1F', '\x2', '\x2', '\x152', '\x147', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x153', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x15C', '\x5', '\x12', '\n', '\x2', '\x155', '\x158', 
		'\x5', 'l', '\x37', '\x2', '\x156', '\x157', '\a', '$', '\x2', '\x2', 
		'\x157', '\x159', '\x5', '\x14', '\v', '\x2', '\x158', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x159', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', '$', '\x2', 
		'\x2', '\x15B', '\x15D', '\x5', '\x14', '\v', '\x2', '\x15C', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '#', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', '\a', ' ', 
		'\x2', '\x2', '\x15F', '\x161', '\x5', '&', '\x14', '\x2', '\x160', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\a', 
		'!', '\x2', '\x2', '\x163', '%', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x166', '\a', '&', '\x2', '\x2', '\x165', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x167', '\x169', '\a', 'Y', '\x2', '\x2', 
		'\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\x16C', '\x6', '\x14', '\x2', '\x2', '\x16B', '\x165', '\x3', '\x2', 
		'\x2', '\x2', '\x16B', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\x5', '(', '\x15', '\x2', '\x16E', '\x16F', '\x5', 
		'\xC6', '\x64', '\x2', '\x16F', '\x171', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x3', '\x2', '\x2', 
		'\x2', '\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x184', '\x5', '\f', '\a', '\x2', '\x175', '\x184', '\x5', ':', 
		'\x1E', '\x2', '\x176', '\x184', '\x5', '*', '\x16', '\x2', '\x177', '\x184', 
		'\x5', 'j', '\x36', '\x2', '\x178', '\x184', '\x5', '<', '\x1F', '\x2', 
		'\x179', '\x184', '\x5', '>', ' ', '\x2', '\x17A', '\x184', '\x5', '@', 
		'!', '\x2', '\x17B', '\x184', '\x5', '\x42', '\"', '\x2', '\x17C', '\x184', 
		'\x5', '\x44', '#', '\x2', '\x17D', '\x184', '\x5', '$', '\x13', '\x2', 
		'\x17E', '\x184', '\x5', 'H', '%', '\x2', '\x17F', '\x184', '\x5', 'J', 
		'&', '\x2', '\x180', '\x184', '\x5', '\\', '/', '\x2', '\x181', '\x184', 
		'\x5', '\x64', '\x33', '\x2', '\x182', '\x184', '\x5', '\x46', '$', '\x2', 
		'\x183', '\x174', '\x3', '\x2', '\x2', '\x2', '\x183', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x176', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x183', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x179', '\x3', '\x2', '\x2', '\x2', '\x183', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x183', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x183', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x183', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x184', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x18B', '\x5', '.', '\x18', '\x2', '\x186', '\x18B', '\x5', 
		'\x30', '\x19', '\x2', '\x187', '\x18B', '\x5', '\x32', '\x1A', '\x2', 
		'\x188', '\x18B', '\x5', ',', '\x17', '\x2', '\x189', '\x18B', '\x5', 
		'\x36', '\x1C', '\x2', '\x18A', '\x185', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x186', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\x5', '\x8E', 'H', '\x2', '\x18D', '-', '\x3', '\x2', 
		'\x2', '\x2', '\x18E', '\x18F', '\x5', '\x8E', 'H', '\x2', '\x18F', '\x190', 
		'\a', '\x41', '\x2', '\x2', '\x190', '\x191', '\x5', '\x8E', 'H', '\x2', 
		'\x191', '/', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\x5', '\x8E', 
		'H', '\x2', '\x193', '\x194', '\t', '\x3', '\x2', '\x2', '\x194', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x5', '\x14', '\v', '\x2', 
		'\x196', '\x197', '\x5', '\x34', '\x1B', '\x2', '\x197', '\x198', '\x5', 
		'\x14', '\v', '\x2', '\x198', '\x33', '\x3', '\x2', '\x2', '\x2', '\x199', 
		'\x19B', '\t', '\x4', '\x2', '\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\a', '$', '\x2', '\x2', 
		'\x19D', '\x35', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\x5', 
		'\x12', '\n', '\x2', '\x19F', '\x1A0', '\a', '+', '\x2', '\x2', '\x1A0', 
		'\x1A1', '\x5', '\x14', '\v', '\x2', '\x1A1', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x1A2', '\x1A3', '\t', '\x5', '\x2', '\x2', '\x1A3', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\a', '\x1D', '\x2', '\x2', '\x1A5', 
		'\x1A7', '\a', '\'', '\x2', '\x2', '\x1A6', '\x1A8', '\x5', '(', '\x15', 
		'\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AB', '\a', '\x1A', '\x2', '\x2', '\x1AA', '\x1AC', '\x5', 
		'\x14', '\v', '\x2', '\x1AB', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AC', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x1AF', '\a', '\x3', '\x2', '\x2', '\x1AE', '\x1B0', 
		'\a', '\x1D', '\x2', '\x2', '\x1AF', '\x1AE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B0', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1', '\x1B3', '\a', '\x17', '\x2', '\x2', '\x1B2', '\x1B4', 
		'\a', '\x1D', '\x2', '\x2', '\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\xF', '\x2', '\x2', '\x1B6', 
		'\x1B7', '\a', '\x1D', '\x2', '\x2', '\x1B7', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x1B8', '\x1B9', '\a', '\x13', '\x2', '\x2', '\x1B9', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\a', '\t', '\x2', '\x2', 
		'\x1BB', '\x1BC', '\x5', '\x8E', 'H', '\x2', '\x1BC', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x1BD', '\x1C6', '\a', '\x14', '\x2', '\x2', '\x1BE', '\x1C7', 
		'\x5', '\x8E', 'H', '\x2', '\x1BF', '\x1C0', '\x5', '\xC6', '\x64', '\x2', 
		'\x1C0', '\x1C1', '\x5', '\x8E', 'H', '\x2', '\x1C1', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x5', '*', '\x16', '\x2', '\x1C3', 
		'\x1C4', '\x5', '\xC6', '\x64', '\x2', '\x1C4', '\x1C5', '\x5', '\x8E', 
		'H', '\x2', '\x1C5', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1C6', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1CE', '\x5', '$', '\x13', '\x2', '\x1C9', 
		'\x1CC', '\a', '\xE', '\x2', '\x2', '\x1CA', '\x1CD', '\x5', 'H', '%', 
		'\x2', '\x1CB', '\x1CD', '\x5', '$', '\x13', '\x2', '\x1CC', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CD', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1C9', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CF', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D3', '\x5', 'L', '\'', '\x2', 
		'\x1D1', '\x1D3', '\x5', 'R', '*', '\x2', '\x1D2', '\x1D0', '\x3', '\x2', 
		'\x2', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D3', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1DF', '\a', '\x11', '\x2', '\x2', 
		'\x1D5', '\x1D7', '\x5', '\x8E', 'H', '\x2', '\x1D6', '\x1D5', '\x3', 
		'\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1DA', '\x5', '*', '\x16', 
		'\x2', '\x1D9', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DD', '\x5', '\xC6', '\x64', '\x2', '\x1DC', '\x1DE', '\x5', 
		'\x8E', 'H', '\x2', '\x1DD', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DD', 
		'\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E0', '\x3', '\x2', '\x2', 
		'\x2', '\x1DF', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1E5', '\a', ' ', '\x2', '\x2', '\x1E2', '\x1E4', '\x5', 'N', 
		'(', '\x2', '\x1E3', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E8', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1E9', '\a', '!', '\x2', '\x2', '\x1E9', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\x5', 'P', ')', '\x2', '\x1EB', '\x1ED', '\a', '\'', 
		'\x2', '\x2', '\x1EC', '\x1EE', '\x5', '&', '\x14', '\x2', '\x1ED', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', '\x2', 
		'\x1EE', 'O', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\a', '\b', 
		'\x2', '\x2', '\x1F0', '\x1F3', '\x5', '\x14', '\v', '\x2', '\x1F1', '\x1F3', 
		'\a', '\x4', '\x2', '\x2', '\x1F2', '\x1EF', '\x3', '\x2', '\x2', '\x2', 
		'\x1F2', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4', '\x1FD', '\a', '\x11', '\x2', '\x2', '\x1F5', '\x1FE', 
		'\x5', 'T', '+', '\x2', '\x1F6', '\x1F7', '\x5', '\xC6', '\x64', '\x2', 
		'\x1F7', '\x1F8', '\x5', 'T', '+', '\x2', '\x1F8', '\x1FE', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9', '\x1FA', '\x5', '*', '\x16', '\x2', '\x1FA', '\x1FB', 
		'\x5', '\xC6', '\x64', '\x2', '\x1FB', '\x1FC', '\x5', 'T', '+', '\x2', 
		'\x1FC', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', '\x203', '\a', ' ', '\x2', '\x2', '\x200', '\x202', '\x5', 
		'V', ',', '\x2', '\x201', '\x200', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x203', '\x201', '\x3', '\x2', '\x2', 
		'\x2', '\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204', '\x206', 
		'\x3', '\x2', '\x2', '\x2', '\x205', '\x203', '\x3', '\x2', '\x2', '\x2', 
		'\x206', '\x207', '\a', '!', '\x2', '\x2', '\x207', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x208', '\x209', '\a', '\x1D', '\x2', '\x2', '\x209', '\x20B', 
		'\a', '+', '\x2', '\x2', '\x20A', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x20A', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\x3', 
		'\x2', '\x2', '\x2', '\x20C', '\x20D', '\x5', '\x90', 'I', '\x2', '\x20D', 
		'\x20E', '\a', '(', '\x2', '\x2', '\x20E', '\x20F', '\a', '\x1E', '\x2', 
		'\x2', '\x20F', '\x210', '\a', '\x16', '\x2', '\x2', '\x210', '\x211', 
		'\a', '\x1F', '\x2', '\x2', '\x211', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\x213', '\x5', 'X', '-', '\x2', '\x213', '\x215', '\a', '\'', 
		'\x2', '\x2', '\x214', '\x216', '\x5', '&', '\x14', '\x2', '\x215', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x216', '\x3', '\x2', '\x2', '\x2', 
		'\x216', 'W', '\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\a', '\b', 
		'\x2', '\x2', '\x218', '\x21B', '\x5', 'Z', '.', '\x2', '\x219', '\x21B', 
		'\a', '\x4', '\x2', '\x2', '\x21A', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x219', '\x3', '\x2', '\x2', '\x2', '\x21B', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x21F', '\x5', 'l', '\x37', '\x2', '\x21D', '\x21F', 
		'\a', '\x1C', '\x2', '\x2', '\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x227', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x223', '\a', '%', '\x2', '\x2', '\x221', 
		'\x224', '\x5', 'l', '\x37', '\x2', '\x222', '\x224', '\a', '\x1C', '\x2', 
		'\x2', '\x223', '\x221', '\x3', '\x2', '\x2', '\x2', '\x223', '\x222', 
		'\x3', '\x2', '\x2', '\x2', '\x224', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x225', '\x220', '\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x228', '\x3', '\x2', '\x2', '\x2', '\x228', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', 
		'\a', '\a', '\x2', '\x2', '\x22B', '\x22F', '\a', ' ', '\x2', '\x2', '\x22C', 
		'\x22E', '\x5', '^', '\x30', '\x2', '\x22D', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x231', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x22D', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'\x230', '\x232', '\x3', '\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', 
		'\x2', '\x2', '\x2', '\x232', '\x233', '\a', '!', '\x2', '\x2', '\x233', 
		']', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x5', '`', '\x31', 
		'\x2', '\x235', '\x237', '\a', '\'', '\x2', '\x2', '\x236', '\x238', '\x5', 
		'&', '\x14', '\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x237', 
		'\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x239', '\x23C', '\a', '\b', '\x2', '\x2', '\x23A', '\x23D', '\x5', 
		'.', '\x18', '\x2', '\x23B', '\x23D', '\x5', '\x62', '\x32', '\x2', '\x23C', 
		'\x23A', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23B', '\x3', '\x2', '\x2', 
		'\x2', '\x23D', '\x240', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x240', 
		'\a', '\x4', '\x2', '\x2', '\x23F', '\x239', '\x3', '\x2', '\x2', '\x2', 
		'\x23F', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x240', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x241', '\x242', '\x5', '\x14', '\v', '\x2', '\x242', 
		'\x243', '\a', '$', '\x2', '\x2', '\x243', '\x248', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x245', '\x5', '\x12', '\n', '\x2', '\x245', '\x246', 
		'\a', '+', '\x2', '\x2', '\x246', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x247', '\x241', '\x3', '\x2', '\x2', '\x2', '\x247', '\x244', '\x3', 
		'\x2', '\x2', '\x2', '\x247', '\x248', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x249', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24A', '\x5', '\x8E', 
		'H', '\x2', '\x24A', '\x63', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x253', 
		'\a', '\x18', '\x2', '\x2', '\x24C', '\x24E', '\x5', '\x8E', 'H', '\x2', 
		'\x24D', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x24E', '\x254', '\x3', '\x2', '\x2', '\x2', '\x24F', 
		'\x254', '\x5', '\x66', '\x34', '\x2', '\x250', '\x252', '\x5', 'h', '\x35', 
		'\x2', '\x251', '\x250', '\x3', '\x2', '\x2', '\x2', '\x251', '\x252', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x253', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x253', '\x24F', '\x3', 
		'\x2', '\x2', '\x2', '\x253', '\x251', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\x5', '$', '\x13', 
		'\x2', '\x256', '\x65', '\x3', '\x2', '\x2', '\x2', '\x257', '\x259', 
		'\x5', '*', '\x16', '\x2', '\x258', '\x257', '\x3', '\x2', '\x2', '\x2', 
		'\x258', '\x259', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', '\x3', 
		'\x2', '\x2', '\x2', '\x25A', '\x25C', '\x5', '\xC6', '\x64', '\x2', '\x25B', 
		'\x25D', '\x5', '\x8E', 'H', '\x2', '\x25C', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x260', '\x5', '\xC6', '\x64', '\x2', 
		'\x25F', '\x261', '\x5', '*', '\x16', '\x2', '\x260', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', '\x2', '\x261', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', '\x5', '\x14', '\v', 
		'\x2', '\x263', '\x264', '\a', '$', '\x2', '\x2', '\x264', '\x269', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x266', '\x5', '\x12', '\n', '\x2', '\x266', 
		'\x267', '\a', '+', '\x2', '\x2', '\x267', '\x269', '\x3', '\x2', '\x2', 
		'\x2', '\x268', '\x262', '\x3', '\x2', '\x2', '\x2', '\x268', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x268', '\x269', '\x3', '\x2', '\x2', '\x2', 
		'\x269', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\a', 
		'\x15', '\x2', '\x2', '\x26B', '\x26C', '\x5', '\x8E', 'H', '\x2', '\x26C', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', '\n', '\x2', 
		'\x2', '\x26E', '\x26F', '\x5', '\x8E', 'H', '\x2', '\x26F', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x270', '\x277', '\x5', 'n', '\x38', '\x2', '\x271', 
		'\x277', '\x5', 'p', '\x39', '\x2', '\x272', '\x273', '\a', '\x1E', '\x2', 
		'\x2', '\x273', '\x274', '\x5', 'l', '\x37', '\x2', '\x274', '\x275', 
		'\a', '\x1F', '\x2', '\x2', '\x275', '\x277', '\x3', '\x2', '\x2', '\x2', 
		'\x276', '\x270', '\x3', '\x2', '\x2', '\x2', '\x276', '\x271', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x272', '\x3', '\x2', '\x2', '\x2', '\x277', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27B', '\x5', '\xA0', 'Q', 
		'\x2', '\x279', '\x27B', '\a', '\x1D', '\x2', '\x2', '\x27A', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', 'o', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x285', '\x5', 'r', 
		':', '\x2', '\x27D', '\x285', '\x5', '\xB0', 'Y', '\x2', '\x27E', '\x285', 
		'\x5', 'x', '=', '\x2', '\x27F', '\x285', '\x5', '\x84', '\x43', '\x2', 
		'\x280', '\x285', '\x5', 'z', '>', '\x2', '\x281', '\x285', '\x5', '|', 
		'?', '\x2', '\x282', '\x285', '\x5', '~', '@', '\x2', '\x283', '\x285', 
		'\x5', '\x80', '\x41', '\x2', '\x284', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x284', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x284', '\x27E', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x280', '\x3', '\x2', '\x2', '\x2', '\x284', '\x281', '\x3', '\x2', '\x2', 
		'\x2', '\x284', '\x282', '\x3', '\x2', '\x2', '\x2', '\x284', '\x283', 
		'\x3', '\x2', '\x2', '\x2', '\x285', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x286', '\x287', '\a', '\"', '\x2', '\x2', '\x287', '\x288', '\x5', 't', 
		';', '\x2', '\x288', '\x289', '\a', '#', '\x2', '\x2', '\x289', '\x28A', 
		'\x5', 'v', '<', '\x2', '\x28A', 's', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28C', '\x5', '\x8E', 'H', '\x2', '\x28C', 'u', '\x3', '\x2', '\x2', 
		'\x2', '\x28D', '\x28E', '\x5', 'l', '\x37', '\x2', '\x28E', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x28F', '\x290', '\a', '?', '\x2', '\x2', '\x290', 
		'\x291', '\x5', 'l', '\x37', '\x2', '\x291', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x292', '\x293', '\a', '\x6', '\x2', '\x2', '\x293', '\x29C', 
		'\a', ' ', '\x2', '\x2', '\x294', '\x297', '\x5', '\x82', '\x42', '\x2', 
		'\x295', '\x297', '\x5', 'n', '\x38', '\x2', '\x296', '\x294', '\x3', 
		'\x2', '\x2', '\x2', '\x296', '\x295', '\x3', '\x2', '\x2', '\x2', '\x297', 
		'\x298', '\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\x5', '\xC6', 
		'\x64', '\x2', '\x299', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x296', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29E', '\x3', '\x2', '\x2', 
		'\x2', '\x29C', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\a', 
		'!', '\x2', '\x2', '\x2A0', '{', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x2A2', '\a', '\"', '\x2', '\x2', '\x2A2', '\x2A3', '\a', '#', '\x2', 
		'\x2', '\x2A3', '\x2A4', '\x5', 'v', '<', '\x2', '\x2A4', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\a', '\v', '\x2', '\x2', '\x2A6', 
		'\x2A7', '\a', '\"', '\x2', '\x2', '\x2A7', '\x2A8', '\x5', 'l', '\x37', 
		'\x2', '\x2A8', '\x2A9', '\a', '#', '\x2', '\x2', '\x2A9', '\x2AA', '\x5', 
		'v', '<', '\x2', '\x2AA', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2B1', '\a', '\r', '\x2', '\x2', '\x2AC', '\x2AD', '\a', '\r', '\x2', 
		'\x2', '\x2AD', '\x2B1', '\a', '\x41', '\x2', '\x2', '\x2AE', '\x2AF', 
		'\a', '\x41', '\x2', '\x2', '\x2AF', '\x2B1', '\a', '\r', '\x2', '\x2', 
		'\x2B0', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2B0', '\x2AC', '\x3', 
		'\x2', '\x2', '\x2', '\x2B0', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2B1', 
		'\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x5', 'v', '<', 
		'\x2', '\x2B3', '\x81', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', 
		'\a', '\x1D', '\x2', '\x2', '\x2B5', '\x2B6', '\x5', '\x8A', '\x46', '\x2', 
		'\x2B6', '\x2B7', '\x5', '\x88', '\x45', '\x2', '\x2B7', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\x2B8', '\x2B9', '\a', '\x1D', '\x2', '\x2', '\x2B9', 
		'\x2BB', '\x5', '\x8A', '\x46', '\x2', '\x2BA', '\x2B4', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\a', '\x5', '\x2', '\x2', 
		'\x2BD', '\x2BE', '\x5', '\x86', '\x44', '\x2', '\x2BE', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x2BF', '\x2C0', '\x5', '\x8A', '\x46', '\x2', '\x2C0', 
		'\x2C1', '\x5', '\x88', '\x45', '\x2', '\x2C1', '\x2C4', '\x3', '\x2', 
		'\x2', '\x2', '\x2C2', '\x2C4', '\x5', '\x8A', '\x46', '\x2', '\x2C3', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x2C4', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C8', 
		'\x5', '\x8A', '\x46', '\x2', '\x2C6', '\x2C8', '\x5', 'l', '\x37', '\x2', 
		'\x2C7', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2C8', '\x89', '\x3', '\x2', '\x2', '\x2', '\x2C9', 
		'\x2D5', '\a', '\x1E', '\x2', '\x2', '\x2CA', '\x2CF', '\x5', '\x8C', 
		'G', '\x2', '\x2CB', '\x2CC', '\a', '%', '\x2', '\x2', '\x2CC', '\x2CE', 
		'\x5', '\x8C', 'G', '\x2', '\x2CD', '\x2CB', '\x3', '\x2', '\x2', '\x2', 
		'\x2CE', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2CD', '\x3', 
		'\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2CF', '\x3', '\x2', '\x2', 
		'\x2', '\x2D2', '\x2D4', '\a', '%', '\x2', '\x2', '\x2D3', '\x2D2', '\x3', 
		'\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D4', 
		'\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2CA', '\x3', '\x2', '\x2', 
		'\x2', '\x2D5', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D7', 
		'\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\a', '\x1F', '\x2', '\x2', 
		'\x2D8', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DB', '\x5', 
		'\x12', '\n', '\x2', '\x2DA', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DA', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DD', '\x3', '\x2', '\x2', 
		'\x2', '\x2DC', '\x2DE', '\a', ',', '\x2', '\x2', '\x2DD', '\x2DC', '\x3', 
		'\x2', '\x2', '\x2', '\x2DD', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2DE', 
		'\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E0', '\x5', 'l', '\x37', 
		'\x2', '\x2E0', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', 
		'\b', 'H', '\x1', '\x2', '\x2E2', '\x2E6', '\x5', '\x90', 'I', '\x2', 
		'\x2E3', '\x2E4', '\t', '\x6', '\x2', '\x2', '\x2E4', '\x2E6', '\x5', 
		'\x8E', 'H', '\b', '\x2E5', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E5', 
		'\x2E3', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2F8', '\x3', '\x2', '\x2', 
		'\x2', '\x2E7', '\x2E8', '\f', '\a', '\x2', '\x2', '\x2E8', '\x2E9', '\t', 
		'\a', '\x2', '\x2', '\x2E9', '\x2F7', '\x5', '\x8E', 'H', '\b', '\x2EA', 
		'\x2EB', '\f', '\x6', '\x2', '\x2', '\x2EB', '\x2EC', '\t', '\b', '\x2', 
		'\x2', '\x2EC', '\x2F7', '\x5', '\x8E', 'H', '\a', '\x2ED', '\x2EE', '\f', 
		'\x5', '\x2', '\x2', '\x2EE', '\x2EF', '\t', '\t', '\x2', '\x2', '\x2EF', 
		'\x2F7', '\x5', '\x8E', 'H', '\x6', '\x2F0', '\x2F1', '\f', '\x4', '\x2', 
		'\x2', '\x2F1', '\x2F2', '\a', '.', '\x2', '\x2', '\x2F2', '\x2F7', '\x5', 
		'\x8E', 'H', '\x5', '\x2F3', '\x2F4', '\f', '\x3', '\x2', '\x2', '\x2F4', 
		'\x2F5', '\a', '-', '\x2', '\x2', '\x2F5', '\x2F7', '\x5', '\x8E', 'H', 
		'\x4', '\x2F6', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2F6', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F3', '\x3', 
		'\x2', '\x2', '\x2', '\x2F7', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FC', '\b', 'I', '\x1', '\x2', 
		'\x2FC', '\x300', '\x5', '\x96', 'L', '\x2', '\x2FD', '\x300', '\x5', 
		'\x92', 'J', '\x2', '\x2FE', '\x300', '\x5', '\xC2', '\x62', '\x2', '\x2FF', 
		'\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2FF', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x300', '\x30C', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x308', '\f', '\x3', '\x2', '\x2', 
		'\x302', '\x303', '\a', '(', '\x2', '\x2', '\x303', '\x309', '\a', '\x1D', 
		'\x2', '\x2', '\x304', '\x309', '\x5', '\xBA', '^', '\x2', '\x305', '\x309', 
		'\x5', '\xBC', '_', '\x2', '\x306', '\x309', '\x5', '\xBE', '`', '\x2', 
		'\x307', '\x309', '\x5', '\xC0', '\x61', '\x2', '\x308', '\x302', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x304', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x308', '\x306', '\x3', '\x2', '\x2', 
		'\x2', '\x308', '\x307', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30B', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30A', '\x3', 
		'\x2', '\x2', '\x2', '\x30C', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x30D', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x310', '\x5', '\x94', 'K', '\x2', '\x310', '\x311', 
		'\a', '\x1E', '\x2', '\x2', '\x311', '\x313', '\x5', '\x8E', 'H', '\x2', 
		'\x312', '\x314', '\a', '%', '\x2', '\x2', '\x313', '\x312', '\x3', '\x2', 
		'\x2', '\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', '\x314', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\x315', '\x316', '\a', '\x1F', '\x2', '\x2', 
		'\x316', '\x93', '\x3', '\x2', '\x2', '\x2', '\x317', '\x31D', '\x5', 
		'p', '\x39', '\x2', '\x318', '\x319', '\a', '\x1E', '\x2', '\x2', '\x319', 
		'\x31A', '\x5', '\x94', 'K', '\x2', '\x31A', '\x31B', '\a', '\x1F', '\x2', 
		'\x2', '\x31B', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x317', 
		'\x3', '\x2', '\x2', '\x2', '\x31C', '\x318', '\x3', '\x2', '\x2', '\x2', 
		'\x31D', '\x95', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x325', '\x5', 
		'\x98', 'M', '\x2', '\x31F', '\x325', '\x5', '\x9E', 'P', '\x2', '\x320', 
		'\x321', '\a', '\x1E', '\x2', '\x2', '\x321', '\x322', '\x5', '\x8E', 
		'H', '\x2', '\x322', '\x323', '\a', '\x1F', '\x2', '\x2', '\x323', '\x325', 
		'\x3', '\x2', '\x2', '\x2', '\x324', '\x31E', '\x3', '\x2', '\x2', '\x2', 
		'\x324', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x324', '\x320', '\x3', 
		'\x2', '\x2', '\x2', '\x325', '\x97', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x32A', '\x5', '\x9A', 'N', '\x2', '\x327', '\x32A', '\x5', '\xA2', 'R', 
		'\x2', '\x328', '\x32A', '\x5', '\xB8', ']', '\x2', '\x329', '\x326', 
		'\x3', '\x2', '\x2', '\x2', '\x329', '\x327', '\x3', '\x2', '\x2', '\x2', 
		'\x329', '\x328', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x32B', '\x330', '\a', '\x1C', '\x2', '\x2', '\x32C', 
		'\x330', '\x5', '\x9C', 'O', '\x2', '\x32D', '\x330', '\x5', '\xB4', '[', 
		'\x2', '\x32E', '\x330', '\a', '\x46', '\x2', '\x2', '\x32F', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x32F', '\x32C', '\x3', '\x2', '\x2', '\x2', 
		'\x32F', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x32E', '\x3', 
		'\x2', '\x2', '\x2', '\x330', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x331', 
		'\x332', '\t', '\n', '\x2', '\x2', '\x332', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x333', '\x334', '\a', '\x1D', '\x2', '\x2', '\x334', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\a', '\x1D', '\x2', '\x2', 
		'\x336', '\x337', '\a', '(', '\x2', '\x2', '\x337', '\x338', '\a', '\x1D', 
		'\x2', '\x2', '\x338', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', 
		'\x5', '\xA4', 'S', '\x2', '\x33A', '\x33B', '\x5', '\xA6', 'T', '\x2', 
		'\x33B', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x346', '\x5', 
		'\xB0', 'Y', '\x2', '\x33D', '\x346', '\x5', 'r', ':', '\x2', '\x33E', 
		'\x33F', '\a', '\"', '\x2', '\x2', '\x33F', '\x340', '\a', ',', '\x2', 
		'\x2', '\x340', '\x341', '\a', '#', '\x2', '\x2', '\x341', '\x346', '\x5', 
		'v', '<', '\x2', '\x342', '\x346', '\x5', '|', '?', '\x2', '\x343', '\x346', 
		'\x5', '~', '@', '\x2', '\x344', '\x346', '\x5', 'n', '\x38', '\x2', '\x345', 
		'\x33C', '\x3', '\x2', '\x2', '\x2', '\x345', '\x33D', '\x3', '\x2', '\x2', 
		'\x2', '\x345', '\x33E', '\x3', '\x2', '\x2', '\x2', '\x345', '\x342', 
		'\x3', '\x2', '\x2', '\x2', '\x345', '\x343', '\x3', '\x2', '\x2', '\x2', 
		'\x345', '\x344', '\x3', '\x2', '\x2', '\x2', '\x346', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x347', '\x34C', '\a', ' ', '\x2', '\x2', '\x348', 
		'\x34A', '\x5', '\xA8', 'U', '\x2', '\x349', '\x34B', '\a', '%', '\x2', 
		'\x2', '\x34A', '\x349', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x34B', 
		'\x3', '\x2', '\x2', '\x2', '\x34B', '\x34D', '\x3', '\x2', '\x2', '\x2', 
		'\x34C', '\x348', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x34D', '\x3', 
		'\x2', '\x2', '\x2', '\x34D', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x34E', 
		'\x34F', '\a', '!', '\x2', '\x2', '\x34F', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x350', '\x355', '\x5', '\xAA', 'V', '\x2', '\x351', '\x352', 
		'\a', '%', '\x2', '\x2', '\x352', '\x354', '\x5', '\xAA', 'V', '\x2', 
		'\x353', '\x351', '\x3', '\x2', '\x2', '\x2', '\x354', '\x357', '\x3', 
		'\x2', '\x2', '\x2', '\x355', '\x353', '\x3', '\x2', '\x2', '\x2', '\x355', 
		'\x356', '\x3', '\x2', '\x2', '\x2', '\x356', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x357', '\x355', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', 
		'\x5', '\xAC', 'W', '\x2', '\x359', '\x35A', '\a', '\'', '\x2', '\x2', 
		'\x35A', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x358', '\x3', 
		'\x2', '\x2', '\x2', '\x35B', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x35C', 
		'\x35D', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35E', '\x5', '\xAE', 
		'X', '\x2', '\x35E', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x362', 
		'\x5', '\x8E', 'H', '\x2', '\x360', '\x362', '\x5', '\xA6', 'T', '\x2', 
		'\x361', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x361', '\x360', '\x3', 
		'\x2', '\x2', '\x2', '\x362', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x363', 
		'\x366', '\x5', '\x8E', 'H', '\x2', '\x364', '\x366', '\x5', '\xA6', 'T', 
		'\x2', '\x365', '\x363', '\x3', '\x2', '\x2', '\x2', '\x365', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\x366', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\x367', '\x368', '\a', '\f', '\x2', '\x2', '\x368', '\x36E', '\a', ' ', 
		'\x2', '\x2', '\x369', '\x36A', '\x5', '\xB2', 'Z', '\x2', '\x36A', '\x36B', 
		'\x5', '\xC6', '\x64', '\x2', '\x36B', '\x36D', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x369', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x370', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x36C', '\x3', '\x2', '\x2', '\x2', '\x36E', 
		'\x36F', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x371', '\x3', '\x2', '\x2', 
		'\x2', '\x370', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x371', '\x372', 
		'\a', '!', '\x2', '\x2', '\x372', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x373', '\x374', '\x5', '\x12', '\n', '\x2', '\x374', '\x375', '\x5', 
		'l', '\x37', '\x2', '\x375', '\x378', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\x378', '\x5', '\xB6', '\\', '\x2', '\x377', '\x373', '\x3', '\x2', '\x2', 
		'\x2', '\x377', '\x376', '\x3', '\x2', '\x2', '\x2', '\x378', '\x37A', 
		'\x3', '\x2', '\x2', '\x2', '\x379', '\x37B', '\x5', '\xB4', '[', '\x2', 
		'\x37A', '\x379', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x37B', '\x3', 
		'\x2', '\x2', '\x2', '\x37B', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x37C', 
		'\x37D', '\t', '\v', '\x2', '\x2', '\x37D', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x37E', '\x380', '\a', '?', '\x2', '\x2', '\x37F', '\x37E', '\x3', 
		'\x2', '\x2', '\x2', '\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x381', '\x382', '\x5', 'n', '\x38', 
		'\x2', '\x382', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x383', '\x384', 
		'\a', '\x5', '\x2', '\x2', '\x384', '\x385', '\x5', '\x86', '\x44', '\x2', 
		'\x385', '\x386', '\x5', '$', '\x13', '\x2', '\x386', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '\x387', '\x388', '\a', '\"', '\x2', '\x2', '\x388', '\x389', 
		'\x5', '\x8E', 'H', '\x2', '\x389', '\x38A', '\a', '#', '\x2', '\x2', 
		'\x38A', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x39B', '\a', '\"', 
		'\x2', '\x2', '\x38C', '\x38E', '\x5', '\x8E', 'H', '\x2', '\x38D', '\x38C', 
		'\x3', '\x2', '\x2', '\x2', '\x38D', '\x38E', '\x3', '\x2', '\x2', '\x2', 
		'\x38E', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x391', '\a', 
		'\'', '\x2', '\x2', '\x390', '\x392', '\x5', '\x8E', 'H', '\x2', '\x391', 
		'\x390', '\x3', '\x2', '\x2', '\x2', '\x391', '\x392', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x393', '\x395', 
		'\x5', '\x8E', 'H', '\x2', '\x394', '\x393', '\x3', '\x2', '\x2', '\x2', 
		'\x394', '\x395', '\x3', '\x2', '\x2', '\x2', '\x395', '\x396', '\x3', 
		'\x2', '\x2', '\x2', '\x396', '\x397', '\a', '\'', '\x2', '\x2', '\x397', 
		'\x398', '\x5', '\x8E', 'H', '\x2', '\x398', '\x399', '\a', '\'', '\x2', 
		'\x2', '\x399', '\x39A', '\x5', '\x8E', 'H', '\x2', '\x39A', '\x39C', 
		'\x3', '\x2', '\x2', '\x2', '\x39B', '\x38D', '\x3', '\x2', '\x2', '\x2', 
		'\x39B', '\x394', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', '\x3', 
		'\x2', '\x2', '\x2', '\x39D', '\x39E', '\a', '#', '\x2', '\x2', '\x39E', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A0', '\a', '(', '\x2', 
		'\x2', '\x3A0', '\x3A1', '\a', '\x1E', '\x2', '\x2', '\x3A1', '\x3A2', 
		'\x5', 'l', '\x37', '\x2', '\x3A2', '\x3A3', '\a', '\x1F', '\x2', '\x2', 
		'\x3A3', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3B3', '\a', '\x1E', 
		'\x2', '\x2', '\x3A5', '\x3AC', '\x5', '\x14', '\v', '\x2', '\x3A6', '\x3A9', 
		'\x5', '\x94', 'K', '\x2', '\x3A7', '\x3A8', '\a', '%', '\x2', '\x2', 
		'\x3A8', '\x3AA', '\x5', '\x14', '\v', '\x2', '\x3A9', '\x3A7', '\x3', 
		'\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AA', 
		'\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3A5', '\x3', '\x2', '\x2', 
		'\x2', '\x3AB', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AE', 
		'\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AF', '\a', ',', '\x2', '\x2', 
		'\x3AE', '\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3AF', '\x3', 
		'\x2', '\x2', '\x2', '\x3AF', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B0', 
		'\x3B2', '\a', '%', '\x2', '\x2', '\x3B1', '\x3B0', '\x3', '\x2', '\x2', 
		'\x2', '\x3B1', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B4', 
		'\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3AB', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3B6', '\a', '\x1F', '\x2', '\x2', '\x3B6', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B8', '\x5', '\x94', 'K', 
		'\x2', '\x3B8', '\x3B9', '\a', '(', '\x2', '\x2', '\x3B9', '\x3BA', '\a', 
		'\x1D', '\x2', '\x2', '\x3BA', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x3BB', 
		'\x3BC', '\x5', 'l', '\x37', '\x2', '\x3BC', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x3BD', '\x3C2', '\a', '&', '\x2', '\x2', '\x3BE', '\x3C2', '\a', 
		'\x2', '\x2', '\x3', '\x3BF', '\x3C2', '\a', 'Y', '\x2', '\x2', '\x3C0', 
		'\x3C2', '\x6', '\x64', '\t', '\x2', '\x3C1', '\x3BD', '\x3', '\x2', '\x2', 
		'\x2', '\x3C1', '\x3BE', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3BF', 
		'\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C0', '\x3', '\x2', '\x2', '\x2', 
		'\x3C2', '\xC7', '\x3', '\x2', '\x2', '\x2', 'q', '\xCF', '\xD5', '\xDB', 
		'\xEB', '\xEF', '\xF2', '\xFB', '\x105', '\x109', '\x10D', '\x111', '\x118', 
		'\x120', '\x12B', '\x12F', '\x133', '\x13B', '\x142', '\x14E', '\x152', 
		'\x158', '\x15C', '\x160', '\x165', '\x168', '\x16B', '\x172', '\x183', 
		'\x18A', '\x19A', '\x1A7', '\x1AB', '\x1AF', '\x1B3', '\x1C6', '\x1CC', 
		'\x1CE', '\x1D2', '\x1D6', '\x1D9', '\x1DD', '\x1DF', '\x1E5', '\x1ED', 
		'\x1F2', '\x1FD', '\x203', '\x20A', '\x215', '\x21A', '\x21E', '\x223', 
		'\x227', '\x22F', '\x237', '\x23C', '\x23F', '\x247', '\x24D', '\x251', 
		'\x253', '\x258', '\x25C', '\x260', '\x268', '\x276', '\x27A', '\x284', 
		'\x296', '\x29C', '\x2B0', '\x2BA', '\x2C3', '\x2C7', '\x2CF', '\x2D3', 
		'\x2D5', '\x2DA', '\x2DD', '\x2E5', '\x2F6', '\x2F8', '\x2FF', '\x308', 
		'\x30C', '\x313', '\x31C', '\x324', '\x329', '\x32F', '\x345', '\x34A', 
		'\x34C', '\x355', '\x35B', '\x361', '\x365', '\x36E', '\x377', '\x37A', 
		'\x37F', '\x38D', '\x391', '\x394', '\x39B', '\x3A9', '\x3AB', '\x3AE', 
		'\x3B1', '\x3B3', '\x3C1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
